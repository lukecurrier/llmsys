{
    "Prompt": "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"",
    "Completions": [
        "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n    if not date:\n        return False\n    if len(date) < 1:\n        return False\n    if len(date) > 10:\n        return False\n    if date[0] != '-':\n        return False\n    if date[1] < 1 or date[1] > 12:\n        return False\n    if date[2] < 1 or date[2] > 31:\n        return False\n    if date[0] != '0' and date[0] != '1' and date[0] != '2':\n        return False\n    if date[1] != '0' and date[1] != '1' and date[1] != '2':\n        return False\n    if date[2] != '0' and date[2] != '1' and date[2] != '2':\n        return False\n    return True\n\n",
        "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n    if date == '':\n        return False\n    if len(date) < 1:\n        return False\n    if date[0] == '0' or date[0] == '1':\n        return False\n    if date[0] == '2' or date[0] == '3' or date[0] == '4' or date[0] == '5' or date[0] == '6':\n        return False\n    if date[0] == '7' or date[0] == '8' or date[0] == '9' or date[0] == '10' or date[0] == '11':\n        return False\n    if date[0] == '12':\n        return False\n    if date[0] == '0' or date[0] == '1' or date[0] == '2' or date[0] == '3' or date[0] == '4' or date[0] == '5':\n        return False\n    if date[0] == '6' or date[0] == '7' or date[0] == '8' or date[0] == '9' or date[0] == '10' or date[0] == '11' or date[0] == '12':\n        return False\n    if date[0] == '0' or date[0]",
        "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n    if not date:\n        return False\n    if len(date) < 1:\n        return False\n    if len(date) > 10:\n        return False\n    if date[0] != '-':\n        return False\n    if date[1] != '-':\n        return False\n    if date[2] != '-':\n        return False\n    if date[0] == '-':\n        return False\n    if date[1] == '-':\n        return False\n    if date[2] == '-':\n        return False\n    if date[0] < '0' or date[0] > '9':\n        return False\n    if date[1] < '0' or date[1] > '9':\n        return False\n    if date[2] < '0' or date[2] > '9':\n        return False\n    if date[0] == '0' and date[1] == '0' and date[2] == '0':\n        return False\n    if date[0] == '0' and date[1] == '0' and date[2] == '1':\n        return False\n    if date[0] == '0' and date[1] == '0' and date[2] == '2':\n        return False\n    if date[0] == '0' and date[1] == '0' and date[2] == '3':\n        return False\n    if date",
        "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n    if not date:\n        return False\n    if len(date) < 1:\n        return False\n    if not date.isdigit():\n        return False\n    if int(date) < 1 or int(date) > 31:\n        return False\n    if int(date) < 1 or int(date) > 30:\n        return False\n    if int(date) < 1 or int(date) > 29:\n        return False\n    if int(date) < 1 or int(date) > 12:\n        return False\n    return True\n\n",
        "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n    if len(date) < 1:\n        return False\n    if len(date) > 10:\n        return False\n    if date[0] != '-':\n        return False\n    if len(date) < 2:\n        return False\n    if date[0] == '-':\n        return False\n    if date[1] < 1 or date[1] > 12:\n        return False\n    if date[2] < 1 or date[2] > 31:\n        return False\n    if date[0] == '-':\n        return False\n    if date[1] < 1 or date[1] > 12:\n        return False\n    if date[2] < 1 or date[2] > 30:\n        return False\n    if date[0] == '-':\n        return False\n    if date[1] < 1 or date[1] > 12:\n        return False\n    if date[2] < 1 or date[2] > 29:\n        return False\n    return True\n\n",
        "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n    if len(date) < 1:\n        return False\n    if int(date) < 1 or int(date) > 31:\n        return False\n    if int(date) < 1 or int(date) > 30:\n        return False\n    if int(date) < 1 or int(date) > 31:\n        return False\n    if int(date) < 1 or int(date) > 31:\n        return False\n    if int(date) < 1 or int(date) > 31:\n        return False\n    if int(date) < 1 or int(date) > 31:\n        return False\n    if int(date) < 1 or int(date) > 31:\n        return False\n    if int(date) < 1 or int(date) > 31:\n        return False\n    if int(date) < 1 or int(date) > 31:\n        return False\n    if int(date) < 1 or int(date) > 31:\n        return False\n    if int(date) < 1 or int(date) > 31:\n        return False\n    if int(date) < 1 or int(date) > 31:\n        return False\n    if int(date) < 1 or int(date) > 31:\n        return False\n   ",
        "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n    if len(date) == 0:\n        return False\n    if len(date) != 10:\n        return False\n    month = date[0:2]\n    day = date[3:5]\n    year = date[6:10]\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > 31:\n        return False\n    if month == 4 or month == 6 or month == 9 or month == 11:\n        if day < 30:\n            return False\n        else:\n            return True\n    if month == 2:\n        if day < 29:\n            return False\n        else:\n            if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:\n                return True\n            else:\n                return False\n    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n        if day < 30:\n            return False\n        else:\n            if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:\n                return True\n            else:\n                return False\n    return True\n\n",
        "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n    if len(date) == 0:\n        return False\n    if not date.isdigit():\n        return False\n    if int(date) < 1 or int(date) > 31:\n        return False\n    if int(date) < 1 or int(date) > 30:\n        return False\n    if int(date) < 1 or int(date) > 31:\n        return False\n    if int(date) < 1 or int(date) > 29:\n        return False\n    if int(date) < 1 or int(date) > 12:\n        return False\n    return True\n\n",
        "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n    if len(date) == 0:\n        return False\n    if len(date) < 1:\n        return False\n    if len(date) > 12:\n        return False\n    if date[0] != '-':\n        return False\n    if date[1] != '-':\n        return False\n    if date[2] != '-':\n        return False\n    if date[0] == '-':\n        return False\n    if date[1] == '-':\n        return False\n    if date[2] == '-':\n        return False\n    if date[0] < '0' or date[0] > '9':\n        return False\n    if date[1] < '0' or date[1] > '9':\n        return False\n    if date[2] < '0' or date[2] > '9':\n        return False\n    if date[0] == '0' or date[1] == '0' or date[2] == '0':\n        return False\n    if date[0] == '1' or date[1] == '1' or date[2] == '1':\n        return False\n    if date[0] == '2' or date[1] == '2' or date[2] == '2':\n        return False\n    if date[0] == '3' or date[1] == '3' or date[2] == '3':\n       ",
        "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n    return True\n\n",
        "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n    if not date:\n        return False\n    if len(date) < 1 or len(date) > 10:\n        return False\n    if date[0] != '-':\n        return False\n    if date[1] != '-':\n        return False\n    if date[2] < 1 or date[2] > 31:\n        return False\n    if date[0] == '-':\n        if date[1] == '-':\n            return False\n        if date[2] < 1 or date[2] > 30:\n            return False\n        if date[0] == '0':\n            return False\n    if date[0] == '0':\n        return False\n    if date[1] == '0':\n        return False\n    if date[2] == '0':\n        return False\n    if date[0] == '0' and date[1] == '0':\n        return False\n    if date[0] == '0' and date[1] == '1':\n        return False\n    if date[0] == '0' and date[1] == '2':\n        return False\n    if date[0] == '0' and date[1] == '3':\n        return False\n    if date[0] == '0' and date[1] == '4':\n        return False\n    if date[0] == '0' and date[1] == '5':",
        "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n    if not date:\n        return False\n    if len(date) != 10:\n        return False\n    if date[0] != '-':\n        return False\n    if date[1] < 1 or date[1] > 12:\n        return False\n    if date[2] < 1 or date[2] > 31:\n        return False\n    if date[3] < 1 or date[3] > 30:\n        return False\n    if date[4] < 1 or date[4] > 29:\n        return False\n    if date[5] < 1 or date[5] > 12:\n        return False\n    if date[6] < 1 or date[6] > 31:\n        return False\n    if date[7] < 1 or date[7] > 28:\n        return False\n    if date[8] < 1 or date[8] > 31:\n        return False\n    if date[9] < 1 or date[9] > 30:\n        return False\n    if date[10] < 1 or date[10] > 31:\n        return False\n    if date[11] < 1 or date[11] > 30:\n        return False\n    if date[12] < 1 or date[12] > 31",
        "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n    if len(date) == 0:\n        return False\n    if not date.isdigit():\n        return False\n    if int(date) < 1 or int(date) > 31:\n        return False\n    if int(date) < 1 or int(date) > 31:\n        return False\n    if int(date) < 1 or int(date) > 30:\n        return False\n    if int(date) < 1 or int(date) > 29:\n        return False\n    if int(date) < 1 or int(date) > 12:\n        return False\n    if date.isdigit() and int(date) >= 1 and int(date) <= 12:\n        return True\n    return False\n\n",
        "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n    if len(date) == 0:\n        return False\n    if not date.isdigit():\n        return False\n    if len(date) != 3:\n        return False\n    if date[0] != '-':\n        return False\n    if date[1] < 1 or date[1] > 12:\n        return False\n    if date[2] < 1 or date[2] > 31:\n        return False\n    if date[0] == '-':\n        if date[1] < 1 or date[1] > 12:\n            return False\n        if date[2] < 1 or date[2] > 30:\n            return False\n    return True\n\n",
        "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n    if len(date) == 0:\n        return False\n    if len(date) != 10:\n        return False\n    if date[0] != '-':\n        return False\n    if date[1] < 1 or date[1] > 12:\n        return False\n    if date[2] < 1 or date[2] > 31:\n        return False\n    if date[3] < 1 or date[3] > 30:\n        return False\n    if date[4] < 1 or date[4] > 29:\n        return False\n    if date[5] < 1 or date[5] > 31:\n        return False\n    if date[6] < 1 or date[6] > 12:\n        return False\n    if date[7] < 1 or date[7] > 2040:\n        return False\n    return True\n\n",
        "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n    if not date:\n        return False\n    if len(date) < 1:\n        return False\n    if len(date) > 10:\n        return False\n    if date[0] == '-':\n        return False\n    if date[0] == '0':\n        return False\n    if date[0] == '1':\n        return False\n    if date[0] == '2':\n        return False\n    if date[0] == '3':\n        return False\n    if date[0] == '4':\n        return False\n    if date[0] == '5':\n        return False\n    if date[0] == '6':\n        return False\n    if date[0] == '7':\n        return False\n    if date[0] == '8':\n        return False\n    if date[0] == '9':\n        return False\n    if date[0] == '10':\n        return False\n    if date[0] == '11':\n        return False\n    if date[0] == '12':\n        return False\n    if date[0] == '01':\n        return False\n    if date[0] == '02':\n        return False\n    if date[0] == '03':\n        return False\n    if date[0] == '04':\n        return False\n    if date[0] == '05':\n        return False\n    if date[0] == '06':",
        "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n    if len(date) == 0:\n        return False\n    if len(date) != 10:\n        return False\n    if date[0] != '0' and date[0] != '1' and date[0] != '2' and date[0] != '3' and date[0] != '4' and date[0] != '5' and date[0] != '6' and date[0] != '7' and date[0] != '8' and date[0] != '9' and date[0] != '0':\n        return False\n    if date[1] < 1 or date[1] > 12:\n        return False\n    if date[2] < 1 or date[2] > 31:\n        return False\n    if date[3] < 1 or date[3] > 30:\n        return False\n    if date[4] < 1 or date[4] > 29:\n        return False\n    if date[5] < 1 or date[5] > 31:\n        return False\n    if date[6] < 1 or date[6] > 12:\n        return False\n    if date[7] < 1 or date[7] > 2040:\n        return False\n    return True\n\n",
        "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n    if not date:\n        return False\n    if len(date) < 1:\n        return False\n    if len(date) > 10:\n        return False\n    if date[0] == '-':\n        return False\n    if date[0] == '0':\n        return False\n    if date[1] == '-':\n        return False\n    if date[2] == '-':\n        return False\n    if date[1] < 1 or date[1] > 12:\n        return False\n    if date[2] < 1 or date[2] > 31:\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[1] < 1 or date[1] > 31:\n        return False\n    if date[2] < 1 or date[2] > 30:\n        return False\n    if date[0] < 1 or date[0] > 12:\n        return False\n    if date[1] < 1 or date[1] > 12:\n        return False\n    if date[2] < 1 or date[2] > 12:\n        return False\n    return True\n\n",
        "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n    if len(date) == 0:\n        return False\n    if len(date) != 10:\n        return False\n    if date[0] != '-':\n        return False\n    if date[1] < 1 or date[1] > 12:\n        return False\n    if date[2] < 1 or date[2] > 31:\n        return False\n    if date[3] < 1 or date[3] > 30:\n        return False\n    if date[4] < 1 or date[4] > 29:\n        return False\n    if date[5] < 1 or date[5] > 12:\n        return False\n    if date[6] < 1 or date[6] > 31:\n        return False\n    if date[7] < 1 or date[7] > 28:\n        return False\n    if date[8] < 1 or date[8] > 31:\n        return False\n    if date[9] < 1 or date[9] > 30:\n        return False\n    if date[10] < 1 or date[10] > 29:\n        return False\n    if date[11] < 1 or date[11] > 31:\n        return False\n    return True\n\n",
        "def valid_date(date: str) -> bool:\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    >>> valid_date('03-11-2000')\n    True\n\n    >>> valid_date('15-01-2012')\n    False\n\n    >>> valid_date('04-0-2040')\n    False\n\n    >>> valid_date('06-04-2020')\n    True\n\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n    if len(date) < 1:\n        return False\n    if len(date) > 10:\n        return False\n    if date[0] != '-':\n        return False\n    if len(date) != 3:\n        return False\n    if date[0] != '0':\n        return False\n    if date[1] != '-':\n        return False\n    if date[2] != '-':\n        return False\n    if date[0] == '0' and date[1] == '0' and date[2] == '0':\n        return False\n    if date[0] == '0' and date[1] == '1' and date[2] == '1':\n        return False\n    if date[0] == '0' and date[1] == '2' and date[2] == '1':\n        return False\n    if date[0] == '0' and date[1] == '3' and date[2] == '1':\n        return False\n    if date[0] == '0' and date[1] == '4' and date[2] == '1':\n        return False\n    if date[0] == '0' and date[1] == '5' and date[2] == '1':\n        return False\n    if date[0] == '0' and date[1] == '6' and date[2] =="
    ],
    "Tests": "def check(candidate):\n    assert candidate('03-11-2000') == True\n    assert candidate('15-01-2012') == False\n    assert candidate('04-0-2040') == False\n    assert candidate('06-04-2020') == True\n    assert candidate('01-01-2007') == True\n    assert candidate('03-32-2011') == False\n    assert candidate('') == False\n    assert candidate('04-31-3000') == False\n    assert candidate('06-06-2005') == True\n    assert candidate('21-31-2000') == False\n    assert candidate('04-12-2003') == True\n    assert candidate('04122003') == False\n    assert candidate('20030412') == False\n    assert candidate('2003-04') == False\n    assert candidate('2003-04-12') == False\n    assert candidate('04-2003') == False\n\ndef test_check():\n    check(valid_date)\n\ntest_check()\n"
}