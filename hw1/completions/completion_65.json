{
    "Prompt": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"",
    "Completions": [
        "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] in 'bcdfghjklmnpqrstvwxyz':\n            words.append(s[i:])\n    return words[:n]\n",
        "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    # TODO: implement your solution here\n    # return [word for word in s.split() if len(word) == n]\n    return [word for word in s.split() if len(word) == n]\n",
        "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if n == 0:\n        return []\n    if n > len(s):\n        return []\n    if n == 1:\n        return [s]\n    if n == 2:\n        return [s[0]] + [s[1]]\n    if n == 3:\n        return [s[0]] + [s[1]] + [s[2]]\n    if n == 4:\n        return [s[0]] + [s[1]] + [s[2]] + [s[3]]\n    if n == 5:\n        return [s[0]] + [s[1]] + [s[2]] + [s[3]] + [s[4]]\n    if n == 6:\n        return [s[0]] + [s[1]] + [s[2]] + [s[3]] + [s[4]] + [s[5]]\n    if n == 7:\n        return [s[0]] + [s[1]] + [s[2]] + [s[3]] + [s[4]] + [s[5]] + [s[6]]\n    if n == 8:\n        return [s[0]] + [s[1]] + [s[2]] + [s[3]] + [s[4]] + [s[5]] + [s[6]] + [s[7]]\n   ",
        "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if not s:\n        return []\n    if len(s) < n:\n        return []\n    words = []\n    for i in range(len(s)):\n        if s[i] in 'bcdfghjklmnpqrstvwxyz':\n            words.append(s[i:])\n    return words\n",
        "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    # TODO: Implement this function\n    # return []\n    # return [word for word in s.split() if len(word) == n]\n    return [word for word in s.split() if len(word) == n]\n",
        "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    return [word for word in s.split() if len(word) == n]\n",
        "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] in 'bcdfghjklmnpqrstvwxyz' and s[i-1] in 'bcdfghjklmnpqrstvwxyz':\n            words.append(s[i:i+n])\n    return words\n",
        "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    # TODO: Implement your solution here\n    return []\n",
        "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    return [word for word in s.split() if len(word) == n]\n",
        "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if s == '':\n        return []\n    if n == 0:\n        return []\n    if n > len(s):\n        return []\n    if n == 1:\n        return [s]\n    return [s[i] for i in range(len(s)) if s[i] in 'bcdfghjklmnpqrstvwxyz']\n",
        "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if s[i:j] in consonants:\n                words.append(s[i:j])\n    return words\n",
        "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    # TODO: implement your solution here\n    words = []\n    for i in range(len(s)):\n        if s[i] in 'bcdfghjklmnpqrstvwxyz':\n            words.append(s[i])\n    return words[:n]\n",
        "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    return [word for word in s.split() if len(word) == n]\n",
        "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    # TODO: Implement your solution here\n    words = []\n    for i in range(len(s)):\n        if s[i] in 'bcdfghjklmnpqrstvwxyz':\n            words.append(s[i:])\n    return words[:n]\n",
        "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] in 'bcdfghjklmnpqrstvwxyz':\n            words.append(s[i:i+n])\n    return words\n",
        "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    words = []\n    for i in range(n):\n        words.append(s[i])\n    return words\n",
        "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    # TODO: Implement the function\n    # return []\n\n    # if len(s) == 0:\n    #     return []\n\n    # if len(s) == 1:\n    #     return [s]\n\n    # if len(s) == 2:\n    #     return [s]\n\n    # if len(s) == 3:\n    #     return [s]\n\n    # if len(s) == 4:\n    #     return [s]\n\n    # if len(s) == 5:\n    #     return [s]\n\n    # if len(s) == 6:\n    #     return [s]\n\n    # if len(s) == 7:\n    #     return [s]\n\n    # if len(s) == 8:\n    #     return [s]\n\n    # if len(s) == 9:\n    #     return [s]\n\n    # if len(s) == 10:\n    #     return [s]\n\n    # if len(s) == 11:\n    #     return [s]\n\n    # if len(s) == 12:\n    #     return [s]\n\n    # if len(s) == 13:\n    #     return [s]\n\n    # if len(s) == 14:\n    #     return [s]\n\n    # if len(s) == 15:\n    #     return",
        "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] in 'bcdfghjklmnpqrstvwxyz':\n            words.append(s[i:])\n    return words[:n]\n",
        "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    if n == 0:\n        return []\n    if n == 1:\n        return [s]\n    if n == 2:\n        return [s[0]]\n    if n == 3:\n        return [s[0]] + [s[1]]\n    if n == 4:\n        return [s[0]] + [s[1]] + [s[2]]\n    if n == 5:\n        return [s[0]] + [s[1]] + [s[2]] + [s[3]]\n    if n == 6:\n        return [s[0]] + [s[1]] + [s[2]] + [s[3]] + [s[4]]\n    if n == 7:\n        return [s[0]] + [s[1]] + [s[2]] + [s[3]] + [s[4]] + [s[5]]\n    if n == 8:\n        return [s[0]] + [s[1]] + [s[2]] + [s[3]] + [s[4]] + [s[5]] + [s[6]]\n    if n == 9:\n        return [s[0]] + [s[1]] + [s[2]] + [s[3]] + [s[4]] + [s[5]] + [s[6]] + [s[",
        "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle sam', 3)\n    ['Uncle']\n    \"\"\"\n    # TODO: Implement the function\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n    # return []\n   "
    ],
    "Tests": "def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
}