{
    "Prompt": "def prime_length(string: str) -> bool:\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    >>> prime_length('Hello')\n    True\n    >>> prime_length('abcdcba')\n    True\n    >>> prime_length('kittens')\n    True\n    >>> prime_length('orange')\n    False\n    \"\"\"",
    "Completions": [
        "def prime_length(string: str) -> bool:\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    >>> prime_length('Hello')\n    True\n    >>> prime_length('abcdcba')\n    True\n    >>> prime_length('kittens')\n    True\n    >>> prime_length('orange')\n    False\n    \"\"\"\n    if len(string) == 1:\n        return True\n    if string[0] == '0' or string[0] == '1' or string[0] == '2' or string[0] == '3' or string[0] == '4' or string[0] == '5' or string[0] == '6' or string[0] == '7' or string[0] == '8' or string[0] == '9':\n        return False\n    if string[0] == '0' or string[0] == '1' or string[0] == '2' or string[0] == '3' or string[0] == '4' or string[0] == '5' or string[0] == '6' or string[0] == '7' or string[0] == '8' or string[0] == '9':\n        return False\n    if string[0] == '0' or string[0] == '1' or string[0] == '2' or string[0] == '3' or string[0] == '4' or string[0] == '5' or string[0] == '6' or string[0] == '7' or string[0] == '8' or string[0] == '9':\n        return False\n    if string[0",
        "def prime_length(string: str) -> bool:\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    >>> prime_length('Hello')\n    True\n    >>> prime_length('abcdcba')\n    True\n    >>> prime_length('kittens')\n    True\n    >>> prime_length('orange')\n    False\n    \"\"\"\n    if len(string) == 1:\n        return True\n    if len(string) == 2:\n        return string[0] == string[1]\n    if len(string) == 3:\n        return string[0] == string[1] or string[0] == string[2]\n    if len(string) == 4:\n        return string[0] == string[1] or string[0] == string[2] or string[0] == string[3]\n    if len(string) == 5:\n        return string[0] == string[1] or string[0] == string[2] or string[0] == string[3] or string[0] == string[4]\n    if len(string) == 6:\n        return string[0] == string[1] or string[0] == string[2] or string[0] == string[3] or string[0] == string[4] or string[0] == string[5]\n    if len(string) == 7:\n        return string[0] == string[1] or string[0] == string[2] or string[0] == string[3] or string[0] == string[4] or string[0] == string[5] or string[0] == string[6]\n    if len(string) == 8:\n       ",
        "def prime_length(string: str) -> bool:\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    >>> prime_length('Hello')\n    True\n    >>> prime_length('abcdcba')\n    True\n    >>> prime_length('kittens')\n    True\n    >>> prime_length('orange')\n    False\n    \"\"\"\n    if len(string) == 1:\n        return True\n    if len(string) == 2:\n        return (string[0] == string[1])\n    if len(string) == 3:\n        return (string[0] == string[1] and string[1] == string[2])\n    if len(string) == 4:\n        return (string[0] == string[1] and string[1] == string[2] and string[2] == string[3])\n    if len(string) == 5:\n        return (string[0] == string[1] and string[1] == string[2] and string[2] == string[3] and string[3] == string[4])\n    if len(string) == 6:\n        return (string[0] == string[1] and string[1] == string[2] and string[2] == string[3] and string[3] == string[4] and string[4] == string[5])\n    if len(string) == 7:\n        return (string[0] == string[1] and string[1] == string[2] and string[2] == string[3] and string[3] == string[4] and string[4] == string[5] and string[5] == string[6])\n    if len(string",
        "def prime_length(string: str) -> bool:\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    >>> prime_length('Hello')\n    True\n    >>> prime_length('abcdcba')\n    True\n    >>> prime_length('kittens')\n    True\n    >>> prime_length('orange')\n    False\n    \"\"\"\n    if len(string) == 1:\n        return True\n    if len(string) == 2:\n        return string[0] == string[1]\n    if len(string) == 3:\n        return string[0] == string[1] and string[0] == string[2]\n    if len(string) == 4:\n        return string[0] == string[1] and string[0] == string[2] and string[0] == string[3]\n    if len(string) == 5:\n        return string[0] == string[1] and string[0] == string[2] and string[0] == string[3] and string[0] == string[4]\n    if len(string) == 6:\n        return string[0] == string[1] and string[0] == string[2] and string[0] == string[3] and string[0] == string[4] and string[0] == string[5]\n    if len(string) == 7:\n        return string[0] == string[1] and string[0] == string[2] and string[0] == string[3] and string[0] == string[4] and string[0] == string[5] and string[0] == string[6]\n    if len(string) == 8:\n       ",
        "def prime_length(string: str) -> bool:\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    >>> prime_length('Hello')\n    True\n    >>> prime_length('abcdcba')\n    True\n    >>> prime_length('kittens')\n    True\n    >>> prime_length('orange')\n    False\n    \"\"\"\n    if len(string) == 1:\n        return True\n    if len(string) == 2:\n        return string[0] == string[1]\n    if len(string) == 3:\n        return string[0] == string[1] and string[2] == string[1]\n    if len(string) == 4:\n        return string[0] == string[1] and string[2] == string[1] and string[3] == string[2]\n    if len(string) == 5:\n        return string[0] == string[1] and string[2] == string[1] and string[3] == string[2] and string[4] == string[3]\n    if len(string) == 6:\n        return string[0] == string[1] and string[2] == string[1] and string[3] == string[2] and string[4] == string[3] and string[5] == string[4]\n    if len(string) == 7:\n        return string[0] == string[1] and string[2] == string[1] and string[3] == string[2] and string[4] == string[3] and string[5] == string[4] and string[6] == string[5]\n    if len(string) == 8:\n       ",
        "def prime_length(string: str) -> bool:\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    >>> prime_length('Hello')\n    True\n    >>> prime_length('abcdcba')\n    True\n    >>> prime_length('kittens')\n    True\n    >>> prime_length('orange')\n    False\n    \"\"\"\n    if len(string) == 1:\n        return True\n    if len(string) == 2:\n        return string[0] == string[1]\n    if len(string) == 3:\n        return string[0] == string[1] and string[1] == string[2]\n    if len(string) == 4:\n        return string[0] == string[1] and string[1] == string[2] and string[2] == string[3]\n    if len(string) == 5:\n        return string[0] == string[1] and string[1] == string[2] and string[2] == string[3] and string[3] == string[4]\n    if len(string) == 6:\n        return string[0] == string[1] and string[1] == string[2] and string[2] == string[3] and string[3] == string[4] and string[4] == string[5]\n    if len(string) == 7:\n        return string[0] == string[1] and string[1] == string[2] and string[2] == string[3] and string[3] == string[4] and string[4] == string[5] and string[5] == string[6]\n    if len(string) == 8:\n       ",
        "def prime_length(string: str) -> bool:\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    >>> prime_length('Hello')\n    True\n    >>> prime_length('abcdcba')\n    True\n    >>> prime_length('kittens')\n    True\n    >>> prime_length('orange')\n    False\n    \"\"\"\n    if len(string) == 1:\n        return True\n    if len(string) == 2:\n        return string[0] == string[1]\n    if len(string) == 3:\n        return string[0] == string[1] and string[0] == string[2]\n    if len(string) == 4:\n        return string[0] == string[1] and string[0] == string[2] and string[0] == string[3]\n    if len(string) == 5:\n        return string[0] == string[1] and string[0] == string[2] and string[0] == string[3] and string[0] == string[4]\n    if len(string) == 6:\n        return string[0] == string[1] and string[0] == string[2] and string[0] == string[3] and string[0] == string[4] and string[0] == string[5]\n    if len(string) == 7:\n        return string[0] == string[1] and string[0] == string[2] and string[0] == string[3] and string[0] == string[4] and string[0] == string[5] and string[0] == string[6]\n    if len(string) == 8:\n       ",
        "def prime_length(string: str) -> bool:\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    >>> prime_length('Hello')\n    True\n    >>> prime_length('abcdcba')\n    True\n    >>> prime_length('kittens')\n    True\n    >>> prime_length('orange')\n    False\n    \"\"\"\n    if len(string) == 0:\n        return False\n    if len(string) == 1:\n        return True\n    if len(string) == 2:\n        return string[0] == string[1]\n    if len(string) == 3:\n        return string[0] == string[1] or string[0] == string[2]\n    if len(string) == 4:\n        return string[0] == string[1] or string[0] == string[2] or string[0] == string[3]\n    if len(string) == 5:\n        return string[0] == string[1] or string[0] == string[2] or string[0] == string[3] or string[0] == string[4]\n    if len(string) == 6:\n        return string[0] == string[1] or string[0] == string[2] or string[0] == string[3] or string[0] == string[4] or string[0] == string[5]\n    if len(string) == 7:\n        return string[0] == string[1] or string[0] == string[2] or string[0] == string[3] or string[0] == string[4] or string[0] == string[5] or string[0] == string[",
        "def prime_length(string: str) -> bool:\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    >>> prime_length('Hello')\n    True\n    >>> prime_length('abcdcba')\n    True\n    >>> prime_length('kittens')\n    True\n    >>> prime_length('orange')\n    False\n    \"\"\"\n    if len(string) == 1:\n        return True\n    if len(string) == 2:\n        return string[0] == string[1]\n    if len(string) == 3:\n        return string[0] == string[1] and string[2] == string[3]\n    if len(string) == 4:\n        return string[0] == string[1] and string[2] == string[3] and string[4] == string[5]\n    if len(string) == 5:\n        return string[0] == string[1] and string[2] == string[3] and string[4] == string[5] and string[6] == string[7]\n    if len(string) == 6:\n        return string[0] == string[1] and string[2] == string[3] and string[4] == string[5] and string[6] == string[7] and string[8] == string[9]\n    if len(string) == 7:\n        return string[0] == string[1] and string[2] == string[3] and string[4] == string[5] and string[6] == string[7] and string[8] == string[9] and string[10] == string[11]\n    if len(string) == 8",
        "def prime_length(string: str) -> bool:\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    >>> prime_length('Hello')\n    True\n    >>> prime_length('abcdcba')\n    True\n    >>> prime_length('kittens')\n    True\n    >>> prime_length('orange')\n    False\n    \"\"\"\n    if len(string) == 1:\n        return True\n    if len(string) == 2:\n        return string[0] == string[1]\n    if len(string) == 3:\n        return string[0] == string[1] and string[1] == string[2]\n    if len(string) == 4:\n        return string[0] == string[1] and string[1] == string[2] and string[2] == string[3]\n    if len(string) == 5:\n        return string[0] == string[1] and string[1] == string[2] and string[2] == string[3] and string[3] == string[4]\n    if len(string) == 6:\n        return string[0] == string[1] and string[1] == string[2] and string[2] == string[3] and string[3] == string[4] and string[4] == string[5]\n    if len(string) == 7:\n        return string[0] == string[1] and string[1] == string[2] and string[2] == string[3] and string[3] == string[4] and string[4] == string[5] and string[5] == string[6]\n    if len(string) == 8:\n       ",
        "def prime_length(string: str) -> bool:\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    >>> prime_length('Hello')\n    True\n    >>> prime_length('abcdcba')\n    True\n    >>> prime_length('kittens')\n    True\n    >>> prime_length('orange')\n    False\n    \"\"\"\n    if len(string) == 1:\n        return True\n    if len(string) == 2:\n        return string[0] == string[1]\n    if len(string) == 3:\n        return string[0] == string[1] or string[0] == string[2]\n    if len(string) == 4:\n        return string[0] == string[1] or string[0] == string[2] or string[0] == string[3]\n    if len(string) == 5:\n        return string[0] == string[1] or string[0] == string[2] or string[0] == string[3] or string[0] == string[4]\n    if len(string) == 6:\n        return string[0] == string[1] or string[0] == string[2] or string[0] == string[3] or string[0] == string[4] or string[0] == string[5]\n    if len(string) == 7:\n        return string[0] == string[1] or string[0] == string[2] or string[0] == string[3] or string[0] == string[4] or string[0] == string[5] or string[0] == string[6]\n    if len(string) == 8:\n       ",
        "def prime_length(string: str) -> bool:\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    >>> prime_length('Hello')\n    True\n    >>> prime_length('abcdcba')\n    True\n    >>> prime_length('kittens')\n    True\n    >>> prime_length('orange')\n    False\n    \"\"\"\n    if len(string) == 1:\n        return True\n    for i in range(2, len(string)):\n        if string[i] != string[i - 1]:\n            return False\n    return True\n\n",
        "def prime_length(string: str) -> bool:\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    >>> prime_length('Hello')\n    True\n    >>> prime_length('abcdcba')\n    True\n    >>> prime_length('kittens')\n    True\n    >>> prime_length('orange')\n    False\n    \"\"\"\n    if len(string) == 0:\n        return False\n    if len(string) == 1:\n        return True\n    if len(string) == 2:\n        if string[0] == string[1]:\n            return True\n        else:\n            return False\n    if len(string) == 3:\n        if string[0] == string[1] and string[1] == string[2]:\n            return True\n        else:\n            return False\n    if len(string) == 4:\n        if string[0] == string[1] and string[1] == string[2] and string[2] == string[3]:\n            return True\n        else:\n            return False\n    if len(string) == 5:\n        if string[0] == string[1] and string[1] == string[2] and string[2] == string[3] and string[3] == string[4]:\n            return True\n        else:\n            return False\n    if len(string) == 6:\n        if string[0] == string[1] and string[1] == string[2] and string[2] == string[3] and string[3] == string[4] and string[4] == string[5]:\n            return True\n        else:\n            return False\n    if len(string) == 7:\n        if string[0] == string[1] and string[",
        "def prime_length(string: str) -> bool:\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    >>> prime_length('Hello')\n    True\n    >>> prime_length('abcdcba')\n    True\n    >>> prime_length('kittens')\n    True\n    >>> prime_length('orange')\n    False\n    \"\"\"\n    if len(string) == 1:\n        return True\n    if len(string) == 2:\n        return string[0] == string[1]\n    if len(string) == 3:\n        return string[0] == string[1] and string[0] == string[2]\n    if len(string) == 4:\n        return string[0] == string[1] and string[0] == string[2] and string[0] == string[3]\n    if len(string) == 5:\n        return string[0] == string[1] and string[0] == string[2] and string[0] == string[3] and string[0] == string[4]\n    if len(string) == 6:\n        return string[0] == string[1] and string[0] == string[2] and string[0] == string[3] and string[0] == string[4] and string[0] == string[5]\n    if len(string) == 7:\n        return string[0] == string[1] and string[0] == string[2] and string[0] == string[3] and string[0] == string[4] and string[0] == string[5] and string[0] == string[6]\n    if len(string) == 8:\n       ",
        "def prime_length(string: str) -> bool:\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    >>> prime_length('Hello')\n    True\n    >>> prime_length('abcdcba')\n    True\n    >>> prime_length('kittens')\n    True\n    >>> prime_length('orange')\n    False\n    \"\"\"\n    if len(string) == 1:\n        return True\n    if len(string) == 2:\n        if string[0] == string[1]:\n            return True\n        else:\n            return False\n    if len(string) == 3:\n        if string[0] == string[1] and string[1] == string[2]:\n            return True\n        else:\n            return False\n    if len(string) == 4:\n        if string[0] == string[1] and string[1] == string[2] and string[2] == string[3]:\n            return True\n        else:\n            return False\n    if len(string) == 5:\n        if string[0] == string[1] and string[1] == string[2] and string[2] == string[3] and string[3] == string[4]:\n            return True\n        else:\n            return False\n    if len(string) == 6:\n        if string[0] == string[1] and string[1] == string[2] and string[2] == string[3] and string[3] == string[4] and string[4] == string[5]:\n            return True\n        else:\n            return False\n    if len(string) == 7:\n        if string[0] == string[1] and string[1] == string[2] and string[2] ==",
        "def prime_length(string: str) -> bool:\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    >>> prime_length('Hello')\n    True\n    >>> prime_length('abcdcba')\n    True\n    >>> prime_length('kittens')\n    True\n    >>> prime_length('orange')\n    False\n    \"\"\"\n    if len(string) == 1:\n        return True\n    if len(string) == 2:\n        return string[0] == string[1]\n    if string[0] == string[1]:\n        return prime_length(string[1:])\n    return False\n\n",
        "def prime_length(string: str) -> bool:\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    >>> prime_length('Hello')\n    True\n    >>> prime_length('abcdcba')\n    True\n    >>> prime_length('kittens')\n    True\n    >>> prime_length('orange')\n    False\n    \"\"\"\n    if len(string) == 1:\n        return True\n    if len(string) == 2:\n        return string[0] == string[1]\n    if string[0] == string[1]:\n        return prime_length(string[1:])\n    return False\n\n",
        "def prime_length(string: str) -> bool:\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    >>> prime_length('Hello')\n    True\n    >>> prime_length('abcdcba')\n    True\n    >>> prime_length('kittens')\n    True\n    >>> prime_length('orange')\n    False\n    \"\"\"\n    if len(string) == 0:\n        return False\n    if len(string) == 1:\n        return True\n    if string[0] == string[-1]:\n        return prime_length(string[1:-1])\n    return not prime_length(string[1:-1])\n\n",
        "def prime_length(string: str) -> bool:\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    >>> prime_length('Hello')\n    True\n    >>> prime_length('abcdcba')\n    True\n    >>> prime_length('kittens')\n    True\n    >>> prime_length('orange')\n    False\n    \"\"\"\n    if len(string) == 1:\n        return True\n    if len(string) == 2:\n        return string[0] == string[1]\n    if len(string) == 3:\n        return string[0] == string[1] and string[1] == string[2]\n    if len(string) == 4:\n        return string[0] == string[1] and string[1] == string[2] and string[2] == string[3]\n    if len(string) == 5:\n        return string[0] == string[1] and string[1] == string[2] and string[2] == string[3] and string[3] == string[4]\n    if len(string) == 6:\n        return string[0] == string[1] and string[1] == string[2] and string[2] == string[3] and string[3] == string[4] and string[4] == string[5]\n    if len(string) == 7:\n        return string[0] == string[1] and string[1] == string[2] and string[2] == string[3] and string[3] == string[4] and string[4] == string[5] and string[5] == string[6]\n    if len(string) == 8:\n       ",
        "def prime_length(string: str) -> bool:\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    >>> prime_length('Hello')\n    True\n    >>> prime_length('abcdcba')\n    True\n    >>> prime_length('kittens')\n    True\n    >>> prime_length('orange')\n    False\n    \"\"\"\n    if len(string) == 0:\n        return False\n    if len(string) == 1:\n        return True\n    if string[0] == string[-1]:\n        return prime_length(string[1:-1])\n    return not prime_length(string[1:-1])\n\n"
    ],
    "Tests": "def check(candidate):\n    assert candidate('Hello') == True\n    assert candidate('abcdcba') == True\n    assert candidate('kittens') == True\n    assert candidate('orange') == False\n    assert candidate('wow') == True\n    assert candidate('world') == True\n    assert candidate('MadaM') == True\n    assert candidate('Wow') == True\n    assert candidate('') == False\n    assert candidate('HI') == True\n    assert candidate('go') == True\n    assert candidate('gogo') == False\n    assert candidate('aaaaaaaaaaaaaaa') == False\n    assert candidate('Madam') == True\n    assert candidate('M') == False\n    assert candidate('0') == False\n\ndef test_check():\n    check(prime_length)\n\ntest_check()\n"
}