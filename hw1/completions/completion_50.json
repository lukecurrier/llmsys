{
    "Prompt": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"",
    "Completions": [
        "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if not string:\n        return 0\n    if not substring:\n        return 0\n    if len(string) == 0:\n        return 0\n    if len(substring) == 0:\n        return 1\n    if len(substring) == 1:\n        return 1\n    return 1 + how_many_times(string[1:], substring[1:])\n",
        "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if not string:\n        return 0\n    if not substring:\n        return 1\n    if len(string) == 1:\n        return 1\n    if len(string) == 2:\n        return 0\n    if len(string) == 3:\n        return 1\n    if len(string) == 4:\n        return 0\n    if len(string) == 5:\n        return 0\n    if len(string) == 6:\n        return 0\n    if len(string) == 7:\n        return 0\n    if len(string) == 8:\n        return 0\n    if len(string) == 9:\n        return 0\n    if len(string) == 10:\n        return 0\n    if len(string) == 11:\n        return 0\n    if len(string) == 12:\n        return 0\n    if len(string) == 13:\n        return 0\n    if len(string) == 14:\n        return 0\n    if len(string) == 15:\n        return 0\n    if len(string) == 16:\n        return 0\n    if len(string) == 17:\n        return 0\n    if len(string) == 18:\n        return 0\n    if len(string) == 19:\n        return 0\n    if len(string",
        "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n\n",
        "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if substring == '':\n        return 0\n    if substring == string:\n        return 1\n    return 1 + how_many_times(string, substring[1:])\n",
        "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if not string:\n        return 0\n    if not substring:\n        return 1\n    if len(string) < len(substring):\n        return 0\n    return how_many_times(string[1:], substring) + how_many_times(string[1:], substring[1:])\n\n",
        "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return len(substring) + len(set(substring)) - len(substring)\n\n",
        "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if not string:\n        return 0\n    if not substring:\n        return 1\n    if substring == string[0]:\n        return 1 + how_many_times(string[1:], substring)\n    return how_many_times(string[1:], substring) + how_many_times(string[1:], substring[1:])\n",
        "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if substring == '':\n        return 0\n    if string == '':\n        return 1\n    if substring == string[0]:\n        return 1 + how_many_times(string[1:], substring)\n    return how_many_times(string[1:], substring) + how_many_times(string[1:], substring[1:])\n",
        "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if substring == '':\n        return 0\n    if substring == string:\n        return 1\n    return 1 + how_many_times(string[1:], substring[1:])\n",
        "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if substring in string:\n        return 1\n    else:\n        return 0\n\n",
        "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if not string:\n        return 0\n    if not substring:\n        return 0\n    if len(string) < len(substring):\n        return 0\n    if len(substring) == 1:\n        return 1\n    count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n\n",
        "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if not string:\n        return 0\n    if not substring:\n        return 1\n    if not string.endswith(substring):\n        return 0\n    return 1 + how_many_times(string[:-len(substring)], substring)\n",
        "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if not string:\n        return 0\n    if not substring:\n        return 1\n    if len(string) < len(substring):\n        return 0\n    if len(substring) == 1:\n        return 1\n    return 1 + how_many_times(string[1:], substring[1:])\n",
        "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if substring == '':\n        return 0\n    if string == '':\n        return 1\n    if substring in string:\n        return 1 + how_many_times(string[len(substring):], substring)\n    else:\n        return how_many_times(string[len(substring):], substring) + how_many_times(string, substring[len(substring):])\n\n",
        "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if not string:\n        return 0\n    if not substring:\n        return 0\n    if len(string) < len(substring):\n        return 0\n    if len(substring) == 1:\n        return 1\n    if len(substring) == 2:\n        return 1 if string.find(substring) != -1 else 0\n    return 1 + how_many_times(string[0:len(substring)], substring[1:])\n",
        "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if len(substring) == 0:\n        return 0\n    if len(string) == 0:\n        return 1\n    if len(substring) == 1:\n        return 1\n    if len(substring) == 2:\n        return 2\n    if len(substring) == 3:\n        return 3\n    if len(substring) == 4:\n        return 4\n    if len(substring) == 5:\n        return 5\n    if len(substring) == 6:\n        return 6\n    if len(substring) == 7:\n        return 7\n    if len(substring) == 8:\n        return 8\n    if len(substring) == 9:\n        return 9\n    if len(substring) == 10:\n        return 10\n    if len(substring) == 11:\n        return 11\n    if len(substring) == 12:\n        return 12\n    if len(substring) == 13:\n        return 13\n    if len(substring) == 14:\n        return 14\n    if len(substring) == 15:\n        return 15\n    if len(substring) == 16:\n        return 16\n    if len(substring) == 17:\n        return 17",
        "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if not string:\n        return 0\n    if not substring:\n        return 0\n    if len(string) < len(substring):\n        return 0\n    if len(substring) == 1:\n        return 1\n    if len(substring) == 0:\n        return 0\n    if len(substring) == 1:\n        return 1\n    if len(substring) == 2:\n        return 1\n    if len(substring) == 3:\n        return 1\n    if len(substring) == 4:\n        return 1\n    if len(substring) == 5:\n        return 1\n    if len(substring) == 6:\n        return 1\n    if len(substring) == 7:\n        return 1\n    if len(substring) == 8:\n        return 1\n    if len(substring) == 9:\n        return 1\n    if len(substring) == 10:\n        return 1\n    if len(substring) == 11:\n        return 1\n    if len(substring) == 12:\n        return 1\n    if len(substring) == 13:\n        return 1\n    if len(substring) == 14:\n        return 1\n    if len(substring) == 15:\n        return 1\n    if len(",
        "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if not string:\n        return 0\n    if not substring:\n        return 0\n    if len(string) == 0:\n        return 1\n    if len(substring) == 0:\n        return 0\n    if string[0] == substring[0]:\n        return 1 + how_many_times(string[1:], substring[1:])\n    return 1 + how_many_times(string[1:], substring[1:]) + how_many_times(string[1:], substring[1:])\n",
        "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if not string:\n        return 0\n    if not substring:\n        return 0\n    if len(string) == 0:\n        return 1\n    if len(substring) == 0:\n        return 0\n    if substring == string[0]:\n        return 1 + how_many_times(string[1:], substring)\n    return 1 + how_many_times(string[1:], substring)\n",
        "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if substring == '':\n        return 0\n    if substring in string:\n        return 1 + how_many_times(string[len(substring):], substring)\n    else:\n        return 0\n"
    ],
    "Tests": "def check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
}