{
    "Prompt": "def is_nested(string: str) -> bool:\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested('[[]]')\n    True\n    >>> is_nested('[]]]]]]][[[[[]')\n    False\n    >>> is_nested('[][]')\n    False\n    >>> is_nested('[]')\n    False\n    >>> is_nested('[[][]]')\n    True\n    >>> is_nested('[[]][[')\n    True\n    \"\"\"",
    "Completions": [
        "def is_nested(string: str) -> bool:\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested('[[]]')\n    True\n    >>> is_nested('[]]]]]]][[[[[]')\n    False\n    >>> is_nested('[][]')\n    False\n    >>> is_nested('[]')\n    False\n    >>> is_nested('[[][]]')\n    True\n    >>> is_nested('[[]][[')\n    True\n    \"\"\"\n    return any(is_nested_subsequence(string, i) for i in range(len(string)))\n\n",
        "def is_nested(string: str) -> bool:\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested('[[]]')\n    True\n    >>> is_nested('[]]]]]]][[[[[]')\n    False\n    >>> is_nested('[][]')\n    False\n    >>> is_nested('[]')\n    False\n    >>> is_nested('[[][]]')\n    True\n    >>> is_nested('[[]][[')\n    True\n    \"\"\"\n    return any(is_nested_subsequence(string, i) for i in range(len(string)))\n\n",
        "def is_nested(string: str) -> bool:\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested('[[]]')\n    True\n    >>> is_nested('[]]]]]]][[[[[]')\n    False\n    >>> is_nested('[][]')\n    False\n    >>> is_nested('[]')\n    False\n    >>> is_nested('[[][]]')\n    True\n    >>> is_nested('[[]][[')\n    True\n    \"\"\"\n    return any(is_nested_subsequence(string, i) for i in range(len(string)))\n\n",
        "def is_nested(string: str) -> bool:\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested('[[]]')\n    True\n    >>> is_nested('[]]]]]]][[[[[]')\n    False\n    >>> is_nested('[][]')\n    False\n    >>> is_nested('[]')\n    False\n    >>> is_nested('[[][]]')\n    True\n    >>> is_nested('[[]][[')\n    True\n    \"\"\"\n    return any(is_nested_subsequence(string, i) for i in range(len(string) - 1))\n\n",
        "def is_nested(string: str) -> bool:\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested('[[]]')\n    True\n    >>> is_nested('[]]]]]]][[[[[]')\n    False\n    >>> is_nested('[][]')\n    False\n    >>> is_nested('[]')\n    False\n    >>> is_nested('[[][]]')\n    True\n    >>> is_nested('[[]][[')\n    True\n    \"\"\"\n    return any(is_nested_subsequence(string, i) for i in range(1, len(string) + 1))\n\n",
        "def is_nested(string: str) -> bool:\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested('[[]]')\n    True\n    >>> is_nested('[]]]]]]][[[[[]')\n    False\n    >>> is_nested('[][]')\n    False\n    >>> is_nested('[]')\n    False\n    >>> is_nested('[[][]]')\n    True\n    >>> is_nested('[[]][[')\n    True\n    \"\"\"\n    if not string:\n        return False\n    if len(string) == 1:\n        return True\n    if string[0] == '[':\n        return is_nested(string[1:])\n    if string[-1] == ']':\n        return is_nested(string[:-1])\n    return False\n\n",
        "def is_nested(string: str) -> bool:\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested('[[]]')\n    True\n    >>> is_nested('[]]]]]]][[[[[]')\n    False\n    >>> is_nested('[][]')\n    False\n    >>> is_nested('[]')\n    False\n    >>> is_nested('[[][]]')\n    True\n    >>> is_nested('[[]][[')\n    True\n    \"\"\"\n    if len(string) == 0:\n        return False\n    if len(string) == 1:\n        return True\n    if string[0] == '[' and string[-1] == ']':\n        return is_nested(string[1:-1])\n    if string[0] == '[' and string[-1] == ']':\n        return is_nested(string[1:-1])\n    if string[0] == '[' and string[-1] == ']':\n        return is_nested(string[1:-1])\n    if string[0] == ']' and string[-1] == '[':\n        return is_nested(string[1:-1])\n    if string[0] == ']' and string[-1] == ']':\n        return is_nested(string[1:-1])\n    if string[0] == ']' and string[-1] == ']':\n        return is_nested(string[1:-1])\n    if string[0] == '[' and string[-1] == ']':\n        return is_nested(string[1:-1])\n    if string[0] == ']' and string[-1] == '[':\n        return is_nested(string[1:-1])\n    if string[0] == ']' and string[-1] == ']':\n        return is_nested(string[1:-1",
        "def is_nested(string: str) -> bool:\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested('[[]]')\n    True\n    >>> is_nested('[]]]]]]][[[[[]')\n    False\n    >>> is_nested('[][]')\n    False\n    >>> is_nested('[]')\n    False\n    >>> is_nested('[[][]]')\n    True\n    >>> is_nested('[[]][[')\n    True\n    \"\"\"\n    if string == '[]':\n        return True\n    elif string == '[]':\n        return False\n    else:\n        return is_nested(string[1:-1])\n\n",
        "def is_nested(string: str) -> bool:\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested('[[]]')\n    True\n    >>> is_nested('[]]]]]]][[[[[]')\n    False\n    >>> is_nested('[][]')\n    False\n    >>> is_nested('[]')\n    False\n    >>> is_nested('[[][]]')\n    True\n    >>> is_nested('[[]][[')\n    True\n    \"\"\"\n    if string == '[]':\n        return True\n    elif string == '[]':\n        return False\n    else:\n        return is_nested(string[1:-1])\n\n",
        "def is_nested(string: str) -> bool:\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested('[[]]')\n    True\n    >>> is_nested('[]]]]]]][[[[[]')\n    False\n    >>> is_nested('[][]')\n    False\n    >>> is_nested('[]')\n    False\n    >>> is_nested('[[][]]')\n    True\n    >>> is_nested('[[]][[')\n    True\n    \"\"\"\n    if string == '[]':\n        return True\n    elif string == '[]':\n        return False\n    elif string == '[]':\n        return False\n    elif string == '[]':\n        return False\n    elif string == '[]':\n        return False\n    elif string == '[]':\n        return False\n    elif string == '[]':\n        return False\n    elif string == '[]':\n        return False\n    elif string == '[]':\n        return False\n    elif string == '[]':\n        return False\n    elif string == '[]':\n        return False\n    elif string == '[]':\n        return False\n    elif string == '[]':\n        return False\n    elif string == '[]':\n        return False\n    elif string == '[]':\n        return False\n    elif string == '[]':\n        return False\n    elif string == '[]':\n        return False\n    elif string == '[]':\n        return False\n    elif string == '[]':\n        return False\n    elif string == '[]':\n        return False\n    elif string == '[]':\n        return False\n    elif string == '[]':\n        return False\n    elif string == '[]':\n        return False\n    elif string == '[]':\n        return False\n    elif string == '[]':\n        return False\n    elif string == '[]':\n        return False\n    elif string == '[]':\n        return False\n    elif string == '[]':\n        return False\n    elif string == '[]':\n        return False\n    elif string == '[]':\n        return False",
        "def is_nested(string: str) -> bool:\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested('[[]]')\n    True\n    >>> is_nested('[]]]]]]][[[[[]')\n    False\n    >>> is_nested('[][]')\n    False\n    >>> is_nested('[]')\n    False\n    >>> is_nested('[[][]]')\n    True\n    >>> is_nested('[[]][[')\n    True\n    \"\"\"\n    return any(is_nested_subsequence(string, i) for i in range(len(string) - 1))\n\n",
        "def is_nested(string: str) -> bool:\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested('[[]]')\n    True\n    >>> is_nested('[]]]]]]][[[[[]')\n    False\n    >>> is_nested('[][]')\n    False\n    >>> is_nested('[]')\n    False\n    >>> is_nested('[[][]]')\n    True\n    >>> is_nested('[[]][[')\n    True\n    \"\"\"\n    # TODO: Implement this function\n    if string == '[]':\n        return True\n    if string == '[][]':\n        return True\n    if string == '[][][]':\n        return True\n    if string == '[][][][]':\n        return True\n    if string == '[][][][][]':\n        return True\n    return False\n\n",
        "def is_nested(string: str) -> bool:\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested('[[]]')\n    True\n    >>> is_nested('[]]]]]]][[[[[]')\n    False\n    >>> is_nested('[][]')\n    False\n    >>> is_nested('[]')\n    False\n    >>> is_nested('[[][]]')\n    True\n    >>> is_nested('[[]][[')\n    True\n    \"\"\"\n    if string == '[]':\n        return True\n    if string == '[]':\n        return False\n    if string == '[]':\n        return False\n    if string == '[]':\n        return False\n    if string == '[]':\n        return False\n    if string == '[]':\n        return False\n    if string == '[]':\n        return False\n    if string == '[]':\n        return False\n    if string == '[]':\n        return False\n    if string == '[]':\n        return False\n    if string == '[]':\n        return False\n    if string == '[]':\n        return False\n    if string == '[]':\n        return False\n    if string == '[]':\n        return False\n    if string == '[]':\n        return False\n    if string == '[]':\n        return False\n    if string == '[]':\n        return False\n    if string == '[]':\n        return False\n    if string == '[]':\n        return False\n    if string == '[]':\n        return False\n    if string == '[]':\n        return False\n    if string == '[]':\n        return False\n    if string == '[]':\n        return False\n    if string == '[]':\n        return False\n    if string == '[]':\n        return False\n    if string == '[]':\n        return False\n    if string == '[]':\n        return False\n    if string == '[]':\n        return False\n    if string == '[]':\n        return False\n    if string == '[]':\n        return False",
        "def is_nested(string: str) -> bool:\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested('[[]]')\n    True\n    >>> is_nested('[]]]]]]][[[[[]')\n    False\n    >>> is_nested('[][]')\n    False\n    >>> is_nested('[]')\n    False\n    >>> is_nested('[[][]]')\n    True\n    >>> is_nested('[[]][[')\n    True\n    \"\"\"\n    if not string:\n        return False\n    if len(string) == 1:\n        return True\n    if string[0] == '[' and string[-1] == ']':\n        return is_nested(string[1:-1])\n    return False\n\n",
        "def is_nested(string: str) -> bool:\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested('[[]]')\n    True\n    >>> is_nested('[]]]]]]][[[[[]')\n    False\n    >>> is_nested('[][]')\n    False\n    >>> is_nested('[]')\n    False\n    >>> is_nested('[[][]]')\n    True\n    >>> is_nested('[[]][[')\n    True\n    \"\"\"\n    return any(is_nested_subsequence(string, i) for i in range(len(string)))\n\n",
        "def is_nested(string: str) -> bool:\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested('[[]]')\n    True\n    >>> is_nested('[]]]]]]][[[[[]')\n    False\n    >>> is_nested('[][]')\n    False\n    >>> is_nested('[]')\n    False\n    >>> is_nested('[[][]]')\n    True\n    >>> is_nested('[[]][[')\n    True\n    \"\"\"\n    return any(is_nested_subsequence(string, i) for i in range(len(string)))\n\n",
        "def is_nested(string: str) -> bool:\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested('[[]]')\n    True\n    >>> is_nested('[]]]]]]][[[[[]')\n    False\n    >>> is_nested('[][]')\n    False\n    >>> is_nested('[]')\n    False\n    >>> is_nested('[[][]]')\n    True\n    >>> is_nested('[[]][[')\n    True\n    \"\"\"\n    if not string:\n        return False\n    if not string[0] == '[':\n        return False\n    if not string[-1] == ']':\n        return False\n    for i in range(1, len(string)):\n        if string[i] == '[':\n            if string[i-1] == ']':\n                if string[i] == ']':\n                    return True\n            else:\n                return False\n        if string[i] == ']':\n            if string[i-1] == '[':\n                if string[i] == ']':\n                    return True\n            else:\n                return False\n    return True\n\n",
        "def is_nested(string: str) -> bool:\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested('[[]]')\n    True\n    >>> is_nested('[]]]]]]][[[[[]')\n    False\n    >>> is_nested('[][]')\n    False\n    >>> is_nested('[]')\n    False\n    >>> is_nested('[[][]]')\n    True\n    >>> is_nested('[[]][[')\n    True\n    \"\"\"\n    return any(is_nested_subsequence(string, i) for i in range(len(string) - 1))\n\n",
        "def is_nested(string: str) -> bool:\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested('[[]]')\n    True\n    >>> is_nested('[]]]]]]][[[[[]')\n    False\n    >>> is_nested('[][]')\n    False\n    >>> is_nested('[]')\n    False\n    >>> is_nested('[[][]]')\n    True\n    >>> is_nested('[[]][[')\n    True\n    \"\"\"\n    if len(string) == 0:\n        return False\n    if len(string) == 1:\n        return True\n    if string[0] == '[' and string[1] == ']':\n        return is_nested(string[2:])\n    else:\n        return False\n\n",
        "def is_nested(string: str) -> bool:\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    >>> is_nested('[[]]')\n    True\n    >>> is_nested('[]]]]]]][[[[[]')\n    False\n    >>> is_nested('[][]')\n    False\n    >>> is_nested('[]')\n    False\n    >>> is_nested('[[][]]')\n    True\n    >>> is_nested('[[]][[')\n    True\n    \"\"\"\n    if len(string) == 0:\n        return False\n    if len(string) == 1:\n        return True\n    if string[0] == '[' and string[-1] == ']':\n        return is_nested(string[1:-1])\n    if string[0] == '[' and string[-1] != ']':\n        return is_nested(string[1:-1])\n    if string[0] != '[' and string[-1] == ']':\n        return is_nested(string[1:-1])\n    return False\n\n"
    ],
    "Tests": "def check(candidate):\n    assert candidate('[[]]') == True\n    assert candidate('[]]]]]]][[[[[]') == False\n    assert candidate('[][]') == False\n    assert candidate('[]') == False\n    assert candidate('[[[[]]]]') == True\n    assert candidate('[]]]]]]]]]]') == False\n    assert candidate('[][][[]]') == True\n    assert candidate('[[]') == False\n    assert candidate('[]]') == False\n    assert candidate('[[]][[') == True\n    assert candidate('[[][]]') == True\n    assert candidate('') == False\n    assert candidate('[[[[[[[[') == False\n    assert candidate(']]]]]]]]') == False\n\ndef test_check():\n    check(is_nested)\n\ntest_check()\n"
}