{
    "Prompt": "from typing import List, Tuple, Optional\n\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n    (None, 1)\n    >>> largest_smallest_integers([])\n    (None, None)\n    >>> largest_smallest_integers([0])\n    (None, None)\n    \"\"\"",
    "Completions": [
        "from typing import List, Tuple, Optional\n\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n    (None, 1)\n    >>> largest_smallest_integers([])\n    (None, None)\n    >>> largest_smallest_integers([0])\n    (None, None)\n    \"\"\"\n    if not lst:\n        return None, None\n    if not lst:\n        return None, None\n    if not lst:\n        return None, None\n    if lst[0] < 0:\n        return None, None\n    if lst[0] > 0:\n        return None, None\n    if lst[0] < 0:\n        return None, None\n    if lst[0] > 0:\n        return None, None\n    if lst[0] < 0:\n        return None, None\n    if lst[0] > 0:\n        return None, None\n    if lst[0] < 0:\n        return None, None\n    if lst[0] > 0:\n        return None, None\n    if lst[0] > 0:\n        return None, None\n    if lst[0] < 0:\n        return None, None\n    if lst[0] > 0:\n        return None, None\n    if lst[0] < 0:\n        return None, None\n    if lst[0] > 0:\n        return None, None\n    if lst[0] < 0:\n        return None, None\n    if lst[0] > 0:\n        return None, None\n    if lst[0] > 0:\n        return None, None\n    if lst[0] > 0:\n        return None, None\n    if lst[0] > 0:\n        return None, None",
        "from typing import List, Tuple, Optional\n\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n    (None, 1)\n    >>> largest_smallest_integers([])\n    (None, None)\n    >>> largest_smallest_integers([0])\n    (None, None)\n    \"\"\"\n    if not lst:\n        return None, None\n    if not lst:\n        return None, None\n    if not lst:\n        return None, None\n    if lst[0] < 0:\n        return None, None\n    if lst[0] > 0:\n        return None, None\n    if lst[0] < 0:\n        return None, None\n    if lst[0] < 0:\n        return None, None\n    if lst[0] > 0:\n        return None, None\n    if lst[0] > 0:\n        return None, None\n    if lst[0] < 0:\n        return None, None\n    if lst[0] > 0:\n        return None, None\n    if lst[0] > 0:\n        return None, None\n    if lst[0] > 0:\n        return None, None\n    if lst[0] > 0:\n        return None, None\n    if lst[0] > 0:\n        return None, None\n    if lst[0] > 0:\n        return None, None\n    if lst[0] > 0:\n        return None, None\n    if lst[0] > 0:\n        return None, None\n    if lst[0] > 0:\n        return None, None\n    if lst[0] > 0:\n        return None, None\n    if lst[0] > 0:\n        return None, None",
        "from typing import List, Tuple, Optional\n\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n    (None, 1)\n    >>> largest_smallest_integers([])\n    (None, None)\n    >>> largest_smallest_integers([0])\n    (None, None)\n    \"\"\"\n    if len(lst) == 0:\n        return None, None\n    if len(lst) == 1:\n        return lst[0], lst[0]\n    if lst[0] < 0:\n        return lst[0], lst[0]\n    if lst[1] < 0:\n        return lst[0], lst[1]\n    if lst[0] < lst[1]:\n        return lst[0], lst[1]\n    return lst[0], lst[1]\n<|endoftext|>",
        "from typing import List, Tuple, Optional\n\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n    (None, 1)\n    >>> largest_smallest_integers([])\n    (None, None)\n    >>> largest_smallest_integers([0])\n    (None, None)\n    \"\"\"\n    if not lst:\n        return None, None\n    if not lst[0]:\n        return None, None\n    if not lst[-1]:\n        return None, None\n    if lst[0] < 0:\n        return None, None\n    if lst[-1] < 0:\n        return None, None\n    return max(lst), min(lst)\n",
        "from typing import List, Tuple, Optional\n\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n    (None, 1)\n    >>> largest_smallest_integers([])\n    (None, None)\n    >>> largest_smallest_integers([0])\n    (None, None)\n    \"\"\"\n    if len(lst) == 0:\n        return None, None\n    if len(lst) == 1:\n        return lst[0], lst[0]\n    if lst[0] < 0:\n        return lst[0], -lst[0]\n    if lst[0] > 0:\n        return -lst[0], lst[0]\n    return lst[0], -lst[0]\n",
        "from typing import List, Tuple, Optional\n\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n    (None, 1)\n    >>> largest_smallest_integers([])\n    (None, None)\n    >>> largest_smallest_integers([0])\n    (None, None)\n    \"\"\"\n    if not lst:\n        return None, None\n    if not lst:\n        return None, None\n    if not lst:\n        return None, None\n    if lst[0] < 0:\n        return None, None\n    if lst[0] > 0:\n        return None, None\n    if lst[0] < 0:\n        return None, None\n    if lst[0] > 0:\n        return None, None\n    if lst[0] < 0:\n        return None, None\n    if lst[0] > 0:\n        return None, None\n    if lst[0] < 0:\n        return None, None\n    if lst[0] > 0:\n        return None, None\n    if lst[0] > 0:\n        return None, None\n    if lst[0] < 0:\n        return None, None\n    if lst[0] > 0:\n        return None, None\n    if lst[0] > 0:\n        return None, None\n    if lst[0] > 0:\n        return None, None\n    if lst[0] > 0:\n        return None, None\n    if lst[0] > 0:\n        return None, None\n    if lst[0] > 0:\n        return None, None\n    if lst[0] > 0:\n        return None, None\n    if lst[0] > 0:\n        return None, None",
        "from typing import List, Tuple, Optional\n\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n    (None, 1)\n    >>> largest_smallest_integers([])\n    (None, None)\n    >>> largest_smallest_integers([0])\n    (None, None)\n    \"\"\"\n    if not lst:\n        return None, None\n    if not lst[0] < 0:\n        return None, None\n    if not lst[0] > 0:\n        return None, None\n    return max(lst), min(lst)\n",
        "from typing import List, Tuple, Optional\n\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n    (None, 1)\n    >>> largest_smallest_integers([])\n    (None, None)\n    >>> largest_smallest_integers([0])\n    (None, None)\n    \"\"\"\n    if not lst:\n        return None, None\n    if not lst[0]:\n        return None, None\n    if not lst[-1]:\n        return None, None\n    if lst[0] < 0:\n        return None, None\n    if lst[-1] < 0:\n        return None, None\n    if lst[0] > 0:\n        return None, None\n    if lst[-1] > 0:\n        return None, None\n    return None, None\n",
        "from typing import List, Tuple, Optional\n\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n    (None, 1)\n    >>> largest_smallest_integers([])\n    (None, None)\n    >>> largest_smallest_integers([0])\n    (None, None)\n    \"\"\"\n    if len(lst) == 0:\n        return None, None\n    if len(lst) == 1:\n        return lst[0], lst[0]\n    if len(lst) == 2:\n        return lst[0], lst[1]\n    if lst[0] < 0:\n        return lst[0], lst[1]\n    if lst[1] < 0:\n        return lst[0], lst[1]\n    return lst[0], lst[1]\n",
        "from typing import List, Tuple, Optional\n\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n    (None, 1)\n    >>> largest_smallest_integers([])\n    (None, None)\n    >>> largest_smallest_integers([0])\n    (None, None)\n    \"\"\"\n    if not lst:\n        return None, None\n    if not lst[0] < 0:\n        return None, None\n    if not lst[0] > 0:\n        return None, None\n    return max(lst), min(lst)\n",
        "from typing import List, Tuple, Optional\n\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n    (None, 1)\n    >>> largest_smallest_integers([])\n    (None, None)\n    >>> largest_smallest_integers([0])\n    (None, None)\n    \"\"\"\n    if not lst:\n        return None, None\n    if len(lst) == 1:\n        return lst[0], lst[0]\n    else:\n        return max(lst), min(lst)\n",
        "from typing import List, Tuple, Optional\n\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n    (None, 1)\n    >>> largest_smallest_integers([])\n    (None, None)\n    >>> largest_smallest_integers([0])\n    (None, None)\n    \"\"\"\n    return None if len(lst) == 0 else (max(lst), min(lst))\n",
        "from typing import List, Tuple, Optional\n\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n    (None, 1)\n    >>> largest_smallest_integers([])\n    (None, None)\n    >>> largest_smallest_integers([0])\n    (None, None)\n    \"\"\"\n    if len(lst) == 0:\n        return None, None\n    if len(lst) == 1:\n        return lst[0], lst[0]\n    if lst[0] < 0:\n        return lst[0], -lst[0]\n    if lst[1] < 0:\n        return -lst[1], lst[1]\n    return lst[0], -lst[1]\n",
        "from typing import List, Tuple, Optional\n\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n    (None, 1)\n    >>> largest_smallest_integers([])\n    (None, None)\n    >>> largest_smallest_integers([0])\n    (None, None)\n    \"\"\"\n    if not lst:\n        return None, None\n    if not lst[0] < 0:\n        return None, None\n    if not lst[0] > 0:\n        return None, None\n    return max(lst), min(lst)\n",
        "from typing import List, Tuple, Optional\n\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n    (None, 1)\n    >>> largest_smallest_integers([])\n    (None, None)\n    >>> largest_smallest_integers([0])\n    (None, None)\n    \"\"\"\n    if not lst:\n        return None, None\n    if not lst[0] < 0:\n        return None, None\n    return max(lst), min(lst)\n",
        "from typing import List, Tuple, Optional\n\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n    (None, 1)\n    >>> largest_smallest_integers([])\n    (None, None)\n    >>> largest_smallest_integers([0])\n    (None, None)\n    \"\"\"\n    if not lst:\n        return None, None\n    if not lst[0]:\n        return None, None\n    if not lst[-1]:\n        return None, None\n    if lst[0] < 0 and lst[-1] > 0:\n        return None, None\n    if lst[0] > 0 and lst[-1] < 0:\n        return None, None\n    if lst[0] < 0 and lst[-1] > 0:\n        return None, None\n    if lst[0] < 0 and lst[-1] < 0:\n        return None, None\n    if lst[0] < 0 and lst[-1] < 0:\n        return None, None\n    if lst[0] < 0 and lst[-1] < 0:\n        return None, None\n    if lst[0] < 0 and lst[-1] > 0:\n        return None, None\n    if lst[0] < 0 and lst[-1] > 0:\n        return None, None\n    if lst[0] > 0 and lst[-1] > 0:\n        return None, None\n    if lst[0] > 0 and lst[-1] < 0:\n        return None, None\n    if lst[0] > 0 and lst[-1] > 0:\n        return None, None\n    if lst[0] > 0 and lst[-1",
        "from typing import List, Tuple, Optional\n\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n    (None, 1)\n    >>> largest_smallest_integers([])\n    (None, None)\n    >>> largest_smallest_integers([0])\n    (None, None)\n    \"\"\"\n    if not lst:\n        return None, None\n    if not lst[0]:\n        return None, None\n    if not lst[-1]:\n        return None, None\n    if lst[0] < 0 and lst[-1] > 0:\n        return None, None\n    if lst[0] < 0 and lst[-1] < 0:\n        return None, None\n    if lst[0] > 0 and lst[-1] > 0:\n        return None, None\n    return None, None\n",
        "from typing import List, Tuple, Optional\n\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n    (None, 1)\n    >>> largest_smallest_integers([])\n    (None, None)\n    >>> largest_smallest_integers([0])\n    (None, None)\n    \"\"\"\n    if not lst:\n        return None, None\n    if not lst[0] < 0:\n        return None, None\n    if not lst[0] > 0:\n        return None, None\n    if not lst[0] < 0:\n        return None, None\n    if not lst[0] > 0:\n        return None, None\n    if not lst[0] < 0:\n        return None, None\n    if not lst[0] > 0:\n        return None, None\n    if not lst[0] < 0:\n        return None, None\n    if not lst[0] > 0:\n        return None, None\n    if not lst[0] < 0:\n        return None, None\n    if not lst[0] > 0:\n        return None, None\n    if not lst[0] > 0:\n        return None, None\n    if not lst[0] > 0:\n        return None, None\n    if not lst[0] > 0:\n        return None, None\n    if not lst[0] > 0:\n        return None, None\n    if not lst[0] > 0:\n        return None, None\n    if not lst[0] > 0:\n        return None, None\n    if not lst[0] > 0:\n        return None, None\n    if not lst[0] > 0:\n        return None, None\n    if",
        "from typing import List, Tuple, Optional\n\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n    (None, 1)\n    >>> largest_smallest_integers([])\n    (None, None)\n    >>> largest_smallest_integers([0])\n    (None, None)\n    \"\"\"\n    if not lst:\n        return None, None\n\n    if not lst:\n        return None, None\n\n    if lst[0] < 0:\n        return None, None\n\n    if lst[0] > 0:\n        return lst[0], None\n\n    return lst[0], lst[0]\n\n",
        "from typing import List, Tuple, Optional\n\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n    (None, 1)\n    >>> largest_smallest_integers([])\n    (None, None)\n    >>> largest_smallest_integers([0])\n    (None, None)\n    \"\"\"\n    if not lst:\n        return None, None\n    if len(lst) == 1:\n        return None, None\n    if lst[0] < 0:\n        return None, None\n    if lst[0] > 0:\n        return None, None\n    if lst[0] < 0:\n        return None, None\n    return lst[0], lst[1]\n"
    ],
    "Tests": "def check(candidate):\n    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)\n    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)\n    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n    assert candidate([]) == (None, None)\n    assert candidate([0]) == (None, None)\n    assert candidate([-1, -3, -5, -6]) == (-1, None)\n    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)\n    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\ndef test_check():\n    check(largest_smallest_integers)\n\ntest_check()\n"
}