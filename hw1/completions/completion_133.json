{
    "Prompt": "def int_to_mini_roman(number: int) -> str:\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19)\n    'xix'\n    >>> int_to_mini_roman(152)\n    'clii'\n    >>> int_to_mini_roman(426)\n    'cdxxvi'\n    \"\"\"",
    "Completions": [
        "def int_to_mini_roman(number: int) -> str:\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19)\n    'xix'\n    >>> int_to_mini_roman(152)\n    'clii'\n    >>> int_to_mini_roman(426)\n    'cdxxvi'\n    \"\"\"\n    if number == 0:\n        return ''\n    if number < 1000:\n        return str(number)\n    else:\n        return int_to_mini_roman(number // 1000) + str(number % 1000)\n\n",
        "def int_to_mini_roman(number: int) -> str:\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19)\n    'xix'\n    >>> int_to_mini_roman(152)\n    'clii'\n    >>> int_to_mini_roman(426)\n    'cdxxvi'\n    \"\"\"\n    if number < 1000:\n        return str(number)\n    else:\n        return int_to_mini_roman(number // 1000) + str(number % 1000)\n\n",
        "def int_to_mini_roman(number: int) -> str:\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19)\n    'xix'\n    >>> int_to_mini_roman(152)\n    'clii'\n    >>> int_to_mini_roman(426)\n    'cdxxvi'\n    \"\"\"\n    if number < 0:\n        return ''\n    if number == 0:\n        return ''\n    if number == 1:\n        return 'I'\n    if number == 2:\n        return 'II'\n    if number == 3:\n        return 'III'\n    if number == 4:\n        return 'IV'\n    if number == 5:\n        return 'V'\n    if number == 6:\n        return 'VI'\n    if number == 7:\n        return 'VII'\n    if number == 8:\n        return 'VIII'\n    if number == 9:\n        return 'IX'\n    if number == 10:\n        return 'X'\n    if number == 11:\n        return 'XI'\n    if number == 12:\n        return 'XII'\n    if number == 13:\n        return 'XIII'\n    if number == 14:\n        return 'XIV'\n    if number == 15:\n        return 'XV'\n    if number == 16:\n        return 'XVI'\n    if number == 17:\n        return 'XVII'\n    if number == 18:\n        return 'XVIII'\n    if number == 19:\n        return 'XIX'\n    if number == 20:\n        return 'XX'\n    if number == 30:\n        return 'XXX'\n    if number == 4",
        "def int_to_mini_roman(number: int) -> str:\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19)\n    'xix'\n    >>> int_to_mini_roman(152)\n    'clii'\n    >>> int_to_mini_roman(426)\n    'cdxxvi'\n    \"\"\"\n    if number == 0:\n        return ''\n    if number < 100:\n        return '0' + str(number)\n    if number < 1000:\n        return str(number) + ' ' + int_to_mini_roman(number // 100)\n    if number < 10000:\n        return str(number) + ' ' + int_to_mini_roman(number // 1000)\n    if number < 100000:\n        return str(number) + ' ' + int_to_mini_roman(number // 10000)\n    if number < 1000000:\n        return str(number) + ' ' + int_to_mini_roman(number // 100000)\n    if number < 10000000:\n        return str(number) + ' ' + int_to_mini_roman(number // 1000000)\n    if number < 100000000:\n        return str(number) + ' ' + int_to_mini_roman(number // 10000000)\n    if number < 1000000000:\n        return str(number) + ' '",
        "def int_to_mini_roman(number: int) -> str:\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19)\n    'xix'\n    >>> int_to_mini_roman(152)\n    'clii'\n    >>> int_to_mini_roman(426)\n    'cdxxvi'\n    \"\"\"\n    if number < 1000:\n        return str(number)\n    else:\n        return int_to_mini_roman(number // 100) + str(number % 100)\n\n",
        "def int_to_mini_roman(number: int) -> str:\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19)\n    'xix'\n    >>> int_to_mini_roman(152)\n    'clii'\n    >>> int_to_mini_roman(426)\n    'cdxxvi'\n    \"\"\"\n    if number < 1000:\n        return str(number)\n    else:\n        return int_to_mini_roman(number // 100) + str(number % 100)\n\n",
        "def int_to_mini_roman(number: int) -> str:\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19)\n    'xix'\n    >>> int_to_mini_roman(152)\n    'clii'\n    >>> int_to_mini_roman(426)\n    'cdxxvi'\n    \"\"\"\n    if number == 0:\n        return ''\n    if number < 0:\n        return 'Invalid input'\n    if number < 10:\n        return '0' + str(number)\n    if number < 20:\n        return str(number)\n    if number < 100:\n        return str(number) + ' ' + int_to_mini_roman(number - 20)\n    if number < 1000:\n        return str(number) + ' ' + int_to_mini_roman(number - 100)\n    if number < 10000:\n        return str(number) + ' ' + int_to_mini_roman(number - 1000)\n    if number < 100000:\n        return str(number) + ' ' + int_to_mini_roman(number - 10000)\n    if number < 1000000:\n        return str(number) + ' ' + int_to_mini_roman(number - 100000)\n    if number < 10000000:\n        return str(number) + ' ' + int_to_mini_roman(number - 1000000)\n    if number < 100000",
        "def int_to_mini_roman(number: int) -> str:\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19)\n    'xix'\n    >>> int_to_mini_roman(152)\n    'clii'\n    >>> int_to_mini_roman(426)\n    'cdxxvi'\n    \"\"\"\n    if number == 0:\n        return ''\n    if number < 0:\n        return 'Invalid input'\n    if number == 0:\n        return '0'\n    if number == 1:\n        return 'I'\n    if number == 2:\n        return 'II'\n    if number == 3:\n        return 'III'\n    if number == 4:\n        return 'IV'\n    if number == 5:\n        return 'V'\n    if number == 6:\n        return 'VI'\n    if number == 7:\n        return 'VII'\n    if number == 8:\n        return 'VIII'\n    if number == 9:\n        return 'IX'\n    if number == 10:\n        return 'X'\n    if number == 11:\n        return 'XI'\n    if number == 12:\n        return 'XII'\n    if number == 13:\n        return 'XIII'\n    if number == 14:\n        return 'XIV'\n    if number == 15:\n        return 'XV'\n    if number == 16:\n        return 'XVI'\n    if number == 17:\n        return 'XVII'\n    if number == 18:\n        return 'XVIII'\n    if number == 19:\n        return 'XIX'\n    if number == 20:\n        return 'XX'\n    if number == ",
        "def int_to_mini_roman(number: int) -> str:\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19)\n    'xix'\n    >>> int_to_mini_roman(152)\n    'clii'\n    >>> int_to_mini_roman(426)\n    'cdxxvi'\n    \"\"\"\n    if number < 1000:\n        return str(number)\n    else:\n        return int_to_mini_roman(number // 100) + 'M' + int_to_mini_roman(number % 100 // 10) + 'D'\n\n",
        "def int_to_mini_roman(number: int) -> str:\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19)\n    'xix'\n    >>> int_to_mini_roman(152)\n    'clii'\n    >>> int_to_mini_roman(426)\n    'cdxxvi'\n    \"\"\"\n    if number < 1000:\n        return str(number)\n    else:\n        num_str = int_to_mini_roman(number // 100)\n        num_str_len = len(num_str)\n        num_str_len_str = num_str[:num_str_len - 1]\n        num_str_len_str_len = len(num_str_len_str)\n        num_str_len_str_len_str = num_str_len_str[:num_str_len_str_len - 1]\n        num_str_len_str_len_str_len = num_str_len_str_len_str[:num_str_len_str_len_str_len - 1]\n        num_str_len_str_len_str_len_str = num_str_len_str_len_str_len_str[:num_str_len_str_len_str_len_str_len - 1]\n        num_str_len_str_len_str_len_str_len = num_str_len_str_len_str_len_str_len[:num_str_len_str_len_str_len_str_len_str_len_str_len - 1]\n        num_str_len",
        "def int_to_mini_roman(number: int) -> str:\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19)\n    'xix'\n    >>> int_to_mini_roman(152)\n    'clii'\n    >>> int_to_mini_roman(426)\n    'cdxxvi'\n    \"\"\"\n    if number == 0:\n        return ''\n    if number < 1000:\n        return str(number)\n    if number % 1000 == 0:\n        return str(number // 1000) + 'M'\n    if number % 100 == 0:\n        return str(number // 100) + 'D'\n    if number % 10 == 0:\n        return str(number // 10) + 'C'\n    if number % 100 == 0:\n        return str(number // 100) + 'L'\n    if number % 10 == 0:\n        return str(number // 10) + 'X'\n    if number % 100 == 0:\n        return str(number // 100) + 'V'\n    if number % 10 == 0:\n        return str(number // 10) + 'I'\n    return str(number // 10) + 'M' + str(number % 10)\n\n",
        "def int_to_mini_roman(number: int) -> str:\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19)\n    'xix'\n    >>> int_to_mini_roman(152)\n    'clii'\n    >>> int_to_mini_roman(426)\n    'cdxxvi'\n    \"\"\"\n    if number == 0:\n        return ''\n    if number < 0:\n        return 'ERROR'\n    if number < 10:\n        return '0' + str(number)\n    if number < 20:\n        return str(number)\n    if number < 100:\n        return str(number) + ' ' + int_to_mini_roman(number - 20)\n    if number < 1000:\n        return str(number) + ' ' + int_to_mini_roman(number - 100)\n    if number < 10000:\n        return str(number) + ' ' + int_to_mini_roman(number - 1000)\n    if number < 100000:\n        return str(number) + ' ' + int_to_mini_roman(number - 10000)\n    if number < 1000000:\n        return str(number) + ' ' + int_to_mini_roman(number - 100000)\n    if number < 10000000:\n        return str(number) + ' ' + int_to_mini_roman(number - 1000000)\n    if number < 1000000",
        "def int_to_mini_roman(number: int) -> str:\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19)\n    'xix'\n    >>> int_to_mini_roman(152)\n    'clii'\n    >>> int_to_mini_roman(426)\n    'cdxxvi'\n    \"\"\"\n    if number == 0:\n        return ''\n    if number < 1000:\n        return str(number)\n    if number < 100:\n        return int_to_mini_roman(number) + ' ' + int_to_mini_roman(number - 100)\n    if number < 10:\n        return int_to_mini_roman(number) + ' ' + int_to_mini_roman(number - 10)\n    if number < 1:\n        return int_to_mini_roman(number) + ' ' + int_to_mini_roman(1)\n\n",
        "def int_to_mini_roman(number: int) -> str:\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19)\n    'xix'\n    >>> int_to_mini_roman(152)\n    'clii'\n    >>> int_to_mini_roman(426)\n    'cdxxvi'\n    \"\"\"\n    if number == 0:\n        return ''\n    if number < 1000:\n        return 'M' + int_to_mini_roman(number % 1000)\n    else:\n        return 'M' + int_to_mini_roman(number % 1000) + 'CM' + int_to_mini_roman(number % 100)\n",
        "def int_to_mini_roman(number: int) -> str:\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19)\n    'xix'\n    >>> int_to_mini_roman(152)\n    'clii'\n    >>> int_to_mini_roman(426)\n    'cdxxvi'\n    \"\"\"\n    # TODO: Implement this function\n    # 1. Convert the number to a string\n    # 2. Convert the string to a list of digits\n    # 3. Convert the list of digits to a list of roman numerals\n    # 4. Return the list of roman numerals\n\n    # TODO: Implement this function\n    # 1. Convert the number to a string\n    # 2. Convert the string to a list of digits\n    # 3. Convert the list of digits to a list of roman numerals\n    # 4. Return the list of roman numerals\n\n    # TODO: Implement this function\n    # 1. Convert the number to a string\n    # 2. Convert the string to a list of digits\n    # 3. Convert the list of digits to a list of roman numerals\n    # 4. Return the list of roman numerals\n\n    # TODO: Implement this function\n    # 1. Convert the number to a string\n    # 2. Convert the string to a list of digits\n    # 3. Convert the list of digits to a list of roman numerals\n    # 4. Return the list of roman numerals\n\n    # TODO: Implement this function\n    # 1. Convert the number to a string\n    # 2. Convert the string to a list of digits\n    # 3. Convert the list of digits to a list of roman numerals\n    # 4. Return the list of roman numerals\n\n    # TODO: Implement this function\n    # ",
        "def int_to_mini_roman(number: int) -> str:\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19)\n    'xix'\n    >>> int_to_mini_roman(152)\n    'clii'\n    >>> int_to_mini_roman(426)\n    'cdxxvi'\n    \"\"\"\n    if number == 0:\n        return ''\n    if number < 0:\n        return 'Invalid input'\n    if number < 10:\n        return '0' + str(number)\n    if number < 20:\n        return str(number)\n    if number < 100:\n        return str(number) + ' ' + int_to_mini_roman(number - 20)\n    if number < 1000:\n        return str(number) + ' ' + int_to_mini_roman(number - 100)\n    if number < 10000:\n        return str(number) + ' ' + int_to_mini_roman(number - 1000)\n    if number < 100000:\n        return str(number) + ' ' + int_to_mini_roman(number - 10000)\n    if number < 1000000:\n        return str(number) + ' ' + int_to_mini_roman(number - 100000)\n    if number < 10000000:\n        return str(number) + ' ' + int_to_mini_roman(number - 1000000)\n    if number < 100000",
        "def int_to_mini_roman(number: int) -> str:\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19)\n    'xix'\n    >>> int_to_mini_roman(152)\n    'clii'\n    >>> int_to_mini_roman(426)\n    'cdxxvi'\n    \"\"\"\n    if number == 0:\n        return ''\n    if number < 0:\n        return '0'\n    if number == 1:\n        return 'I'\n    if number == 2:\n        return 'II'\n    if number == 3:\n        return 'III'\n    if number == 4:\n        return 'IV'\n    if number == 5:\n        return 'V'\n    if number == 6:\n        return 'VI'\n    if number == 7:\n        return 'VII'\n    if number == 8:\n        return 'VIII'\n    if number == 9:\n        return 'IX'\n    if number == 10:\n        return 'X'\n    if number == 11:\n        return 'XI'\n    if number == 12:\n        return 'XII'\n    if number == 13:\n        return 'XIII'\n    if number == 14:\n        return 'XIV'\n    if number == 15:\n        return 'XV'\n    if number == 16:\n        return 'XVI'\n    if number == 17:\n        return 'XVII'\n    if number == 18:\n        return 'XVIII'\n    if number == 19:\n        return 'XIX'\n    if number == 20:\n        return 'XX'\n    if number == 30:\n        return 'XXX'\n    if number ==",
        "def int_to_mini_roman(number: int) -> str:\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19)\n    'xix'\n    >>> int_to_mini_roman(152)\n    'clii'\n    >>> int_to_mini_roman(426)\n    'cdxxvi'\n    \"\"\"\n    if number == 0:\n        return ''\n    if number < 1000:\n        return str(number)\n    if number < 100:\n        return int_to_mini_roman(number - 100) + ' ' + int_to_mini_roman(100 - number)\n    if number < 10:\n        return int_to_mini_roman(number - 10) + ' ' + int_to_mini_roman(10 - number)\n    if number < 1:\n        return int_to_mini_roman(number) + ' ' + int_to_mini_roman(1)\n\n",
        "def int_to_mini_roman(number: int) -> str:\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19)\n    'xix'\n    >>> int_to_mini_roman(152)\n    'clii'\n    >>> int_to_mini_roman(426)\n    'cdxxvi'\n    \"\"\"\n    if number < 1000:\n        return str(number)\n    else:\n        return int_to_mini_roman(number // 100) + str(number % 100)\n\n",
        "def int_to_mini_roman(number: int) -> str:\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19)\n    'xix'\n    >>> int_to_mini_roman(152)\n    'clii'\n    >>> int_to_mini_roman(426)\n    'cdxxvi'\n    \"\"\"\n    if number < 1000:\n        return str(number)\n    else:\n        return int_to_mini_roman(number // 100) + str(number % 100)\n\n"
    ],
    "Tests": "def check(candidate):\n    assert candidate(19) == 'xix'\n    assert candidate(152) == 'clii'\n    assert candidate(251) == 'ccli'\n    assert candidate(426) == 'cdxxvi'\n    assert candidate(500) == 'd'\n    assert candidate(1) == 'i'\n    assert candidate(4) == 'iv'\n    assert candidate(43) == 'xliii'\n    assert candidate(90) == 'xc'\n    assert candidate(94) == 'xciv'\n    assert candidate(532) == 'dxxxii'\n    assert candidate(900) == 'cm'\n    assert candidate(994) == 'cmxciv'\n    assert candidate(1000) == 'm'\n\ndef test_check():\n    check(int_to_mini_roman)\n\ntest_check()\n"
}