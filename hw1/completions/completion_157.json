{
    "Prompt": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"",
    "Completions": [
        "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    if brackets == '':\n        return True\n    if brackets[0] == '(':\n        return correct_bracketing(brackets[1:-1])\n    if brackets[-1] == ')':\n        return correct_bracketing(brackets[:-1])\n    return False\n\n",
        "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace(')', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace(')', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace(')', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace(')', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace(')', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace(')', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace(')', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace(')', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace",
        "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    brackets_open = [x for x in brackets if x == '(']\n    brackets_close = [x for x in brackets if x == ')']\n\n    return len(brackets_open) == len(brackets_close)\n",
        "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace",
        "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    brackets_map = {\n        '(': ')',\n        ')': '(',\n        ']': '['\n    }\n    for bracket in brackets:\n        if bracket not in brackets_map:\n            return False\n    return True\n\n",
        "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    brackets_map = {\n        '(': ')',\n        ')': '(',\n        ']': '['\n    }\n    for bracket in brackets:\n        if bracket not in brackets_map:\n            return False\n    return True\n\n",
        "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    brackets = brackets.strip()\n    brackets = brackets.replace('(', '(')\n    brackets = brackets.replace(')', ')')\n    brackets = brackets.replace('(', '(')\n    brackets = brackets.replace(')', ')')\n    brackets = brackets.replace('(', '(')\n    brackets = brackets.replace(')', ')')\n    brackets = brackets.replace('(', '(')\n    brackets = brackets.replace(')', ')')\n    brackets = brackets.replace('(', '(')\n    brackets = brackets.replace(')', ')')\n    brackets = brackets.replace('(', '(')\n    brackets = brackets.replace(')', ')')\n    brackets = brackets.replace('(', '(')\n    brackets = brackets.replace(')', ')')\n    brackets = brackets.replace('(', '(')\n    brackets = brackets.replace(')', ')')\n    brackets = brackets.replace('(', '(')\n    brackets = brackets.replace(')', ')')\n    brackets = brackets.replace('(', '(')\n    brackets = brackets.replace(')', ')')\n    brackets = brackets.replace('(', '(')\n    brackets = brackets.replace(')', ')')\n    brackets = brackets.replace('(', '(')\n    brackets = brackets.replace(')', ')')\n    brackets = brackets.replace('(', '(')\n    brackets = brackets.replace(')', ')')\n    brackets = brackets.replace('(', '(')\n    brackets = brackets.replace(')', ')",
        "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    brackets_open = set(brackets.split('('))\n    brackets_close = set(brackets.split(')'))\n    return brackets_open == brackets_close\n\n",
        "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    brackets = brackets.split(')')\n    for bracket in brackets:\n        if bracket == '(':\n            if bracket == '(':\n                return True\n            else:\n                return False\n        elif bracket == ')':\n            if bracket == '(':\n                return False\n            else:\n                return True\n    return True\n\n",
        "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    brackets_dict = {\n        '(': ')',\n        ')': '(',\n        ']': '['\n    }\n    for bracket in brackets:\n        if bracket not in brackets_dict:\n            return False\n    return True\n\n",
        "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    if brackets == '':\n        return True\n    if brackets[0] == '(':\n        return correct_bracketing(brackets[1:])\n    else:\n        return correct_bracketing(brackets[1:])\n\n",
        "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    brackets = brackets.split(')')\n    for bracket in brackets:\n        if bracket == '(':\n            return True\n        elif bracket == ')':\n            return False\n    return True\n\n",
        "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    brackets = brackets.split(')')\n    for bracket in brackets:\n        if bracket == '(':\n            return False\n        elif bracket == ')':\n            return True\n    return True\n\n",
        "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    if not brackets:\n        return False\n\n    brackets_list = brackets.split(')')\n    for bracket in brackets_list:\n        if bracket == '(':\n            brackets_list.remove(bracket)\n        elif bracket == ')':\n            brackets_list.append(bracket)\n\n    return all(bracket == ')' for bracket in brackets_list)\n\n",
        "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    brackets_set = set(brackets)\n    for bracket in brackets:\n        if bracket not in brackets_set:\n            return False\n        brackets_set.remove(bracket)\n    return True\n\n",
        "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    brackets_list = brackets.split(')')\n    for bracket in brackets_list:\n        if bracket == '(':\n            brackets_list.remove(')')\n        elif bracket == ')':\n            brackets_list.remove('(')\n    return all(brackets_list)\n\n",
        "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    if brackets == '':\n        return True\n    if brackets[0] == '(':\n        return correct_bracketing(brackets[1:-1])\n    else:\n        return False\n\n",
        "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    brackets_map = {\n        '(': ')',\n        ')': '(',\n        ']': '['\n    }\n\n    for bracket in brackets:\n        if bracket in brackets_map:\n            brackets_map[bracket] = brackets_map[bracket]\n        else:\n            return False\n\n    return True\n\n",
        "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    brackets_map = {\n        '(': ')',\n        ')': '(',\n        ']': '['\n    }\n    for bracket in brackets:\n        if bracket not in brackets_map:\n            return False\n\n    return True\n\n",
        "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"\n    brackets_open = set(brackets)\n    brackets_close = set(brackets[::-1])\n    return brackets_open == brackets_close\n\n"
    ],
    "Tests": "def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()') == False\n    assert candidate('(') == False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
}