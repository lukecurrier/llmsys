{
    "Prompt": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"",
    "Completions": [
        "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    music_list = music_string.split('|')\n    beats = [0] * len(music_list)\n    for i in range(len(music_list)):\n        if music_list[i] == 'o':\n            beats[i] = 4\n        elif music_list[i] == 'o|':\n            beats[i] = 2\n        elif music_list[i] == '.|':\n            beats[i] = 1\n        else:\n            raise ValueError('Invalid note: {}'.format(music_list[i]))\n    return beats\n",
        "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    music_string = music_string.replace(' ', '')\n    music_string = music_string.replace('o', 'o')\n    music_string = music_string.replace('o|', 'o|')\n    music_string = music_string.replace('.|', '.|')\n    music_string = music_string.replace('o|o', 'o|o')\n    music_string = music_string.replace('o|o|o', 'o|o|o')\n    music_string = music_string.replace('o|o|o|o', 'o|o|o|o')\n    music_string = music_string.replace('o|o|o|o|o', 'o|o|o|o|o')\n    music_string = music_string.replace('o|o|o|o|o|o', 'o|o|o|o|o|o')\n    music_string = music_string.replace('o|o|o|o|o|o|o', 'o|o|o|o|o|o|o')\n    music_string = music_string.replace('o|o|o|o|o|o|o|o', 'o|o|o|o|o|o|o|o')\n    music_string = music_string.replace('o|o",
        "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    notes = []\n    for note in music_string:\n        if note == 'o':\n            notes.append(4)\n        elif note == 'o|':\n            notes.append(2)\n        elif note == '.|':\n            notes.append(1)\n        else:\n            raise ValueError('Invalid note: {}'.format(note))\n    return notes\n",
        "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    music_list = music_string.split('|')\n    music_list = [int(x) for x in music_list]\n    return music_list\n",
        "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    music_list = music_string.split('|')\n    music_list = [int(x) for x in music_list]\n    return music_list\n",
        "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    music_string = music_string.replace(' ', '')\n    music_string = music_string.replace('o', 'o')\n    music_string = music_string.replace('o|', 'o|')\n    music_string = music_string.replace('.|', '.|')\n    music_string = music_string.replace('o', 'o')\n    music_string = music_string.replace('o|', 'o|')\n    music_string = music_string.replace('.|', '.|')\n    music_string = music_string.replace('o', 'o')\n    music_string = music_string.replace('o|', 'o|')\n    music_string = music_string.replace('.|', '.|')\n    music_string = music_string.replace('o', 'o')\n    music_string = music_string.replace('o|', 'o|')\n    music_string = music_string.replace('.|', '.|')\n    music_string = music_string.replace('o', 'o')\n    music_string = music_string.replace('o|', 'o|')\n    music_string = music_string.replace('.|', '.|')\n    music_string = music_string.replace('o', 'o')\n    music_string = music_string.replace('o|', 'o|')\n    music_string = music_string.",
        "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    music_string = music_string.replace(' ', '')\n    music_string = music_string.replace('o', 'o')\n    music_string = music_string.replace('o|', 'o|')\n    music_string = music_string.replace('.|', '.|')\n    music_string = music_string.replace('o', 'o')\n    music_string = music_string.replace('o|', 'o|')\n    music_string = music_string.replace('.|', '.|')\n    music_string = music_string.replace('o', 'o')\n    music_string = music_string.replace('o|', 'o|')\n    music_string = music_string.replace('.|', '.|')\n    music_string = music_string.replace('o', 'o')\n    music_string = music_string.replace('o|', 'o|')\n    music_string = music_string.replace('.|', '.|')\n    music_string = music_string.replace('o', 'o')\n    music_string = music_string.replace('o|', 'o|')\n    music_string = music_string.replace('.|', '.|')\n    music_string = music_string.replace('o', 'o')\n    music_string = music_string.replace('o|', 'o|')\n    music_string = music_string.",
        "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    music_string = music_string.replace(' ', '')\n    music_string = music_string.replace('o', 'o|').replace('o.', 'o|').replace('o.', 'o|').replace('o.', 'o|').replace('o.', 'o|').replace('o.', 'o|').replace('o.', 'o|').replace('o.', 'o|').replace('o.', 'o|').replace('o.', 'o|').replace('o.', 'o|').replace('o.', 'o|').replace('o.', 'o|').replace('o.', 'o|').replace('o.', 'o|').replace('o.', 'o|').replace('o.', 'o|').replace('o.', 'o|').replace('o.', 'o|').replace('o.', 'o|').replace('o.', 'o|').replace('o.', 'o|').replace('o.', 'o|').replace('o.', 'o|').replace('o.', 'o|').replace('o.', 'o|').replace('o.', 'o|').replace('o.', 'o|').replace('o.', 'o|').replace('o.', 'o|').replace('o.', 'o|').replace('o.', 'o|').replace('o.', 'o|').replace('o.', 'o|').replace('o.', 'o",
        "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    music_list = music_string.split('|')\n    return [int(n) for n in music_list]\n",
        "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    music_list = music_string.split('|')\n    music_list = [int(n) for n in music_list]\n    return music_list\n",
        "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    music_list = music_string.split('|')\n    return [int(x) for x in music_list]\n",
        "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    music_list = music_string.split('|')\n    music_list = [int(i) for i in music_list]\n    return music_list\n",
        "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    music_string = music_string.replace(' ', '')\n    music_string = music_string.replace('o', 'o')\n    music_string = music_string.replace('o|', 'o|')\n    music_string = music_string.replace('.|', '.|')\n    music_string = music_string.replace('o', 'o')\n    music_string = music_string.replace('o|', 'o|')\n    music_string = music_string.replace('.|', '.|')\n    music_string = music_string.replace('o', 'o')\n    music_string = music_string.replace('o|', 'o|')\n    music_string = music_string.replace('.|', '.|')\n    music_string = music_string.replace('o', 'o')\n    music_string = music_string.replace('o|', 'o|')\n    music_string = music_string.replace('.|', '.|')\n    music_string = music_string.replace('o', 'o')\n    music_string = music_string.replace('o|', 'o|')\n    music_string = music_string.replace('.|', '.|')\n    music_string = music_string.replace('o', 'o')\n    music_string = music_string.replace('o|', 'o|')\n    music_string = music_string.",
        "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    music_list = music_string.split('|')\n    music_list = [int(i) for i in music_list]\n    return music_list\n",
        "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    music_list = music_string.split('|')\n    music_list = [int(i) for i in music_list]\n    return music_list\n",
        "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    music_string = music_string.replace(' ', '')\n    music_string = music_string.replace('o', 'o')\n    music_string = music_string.replace('o|', 'o|')\n    music_string = music_string.replace('.|', '.|')\n    music_string = music_string.replace('o', 'o')\n    music_string = music_string.replace('o|', 'o|')\n    music_string = music_string.replace('.|', '.|')\n    music_string = music_string.replace('o', 'o')\n    music_string = music_string.replace('o|', 'o|')\n    music_string = music_string.replace('.|', '.|')\n    music_string = music_string.replace('o', 'o')\n    music_string = music_string.replace('o|', 'o|')\n    music_string = music_string.replace('.|', '.|')\n    music_string = music_string.replace('o', 'o')\n    music_string = music_string.replace('o|', 'o|')\n    music_string = music_string.replace('.|', '.|')\n    music_string = music_string.replace('o', 'o')\n    music_string = music_string.replace('o|', 'o|')\n    music_string = music_string.",
        "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    music_list = music_string.split('|')\n    music_list = [int(i) for i in music_list]\n    return music_list\n",
        "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    music_string = music_string.replace(' ', '')\n    music_string = music_string.replace('o', 'o')\n    music_string = music_string.replace('o|', 'o|')\n    music_string = music_string.replace('.|', '.|')\n    music_string = music_string.replace('o', 'o')\n    music_string = music_string.replace('o|', 'o|')\n    music_string = music_string.replace('.|', '.|')\n    music_string = music_string.replace('o', 'o')\n    music_string = music_string.replace('o|', 'o|')\n    music_string = music_string.replace('.|', '.|')\n    music_string = music_string.replace('o', 'o')\n    music_string = music_string.replace('o|', 'o|')\n    music_string = music_string.replace('.|', '.|')\n    music_string = music_string.replace('o', 'o')\n    music_string = music_string.replace('o|', 'o|')\n    music_string = music_string.replace('.|', '.|')\n    music_string = music_string.replace('o', 'o')\n    music_string = music_string.replace('o|', 'o|')\n    music_string = music_string.",
        "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    music_list = music_string.split('|')\n    music_list = [int(x) for x in music_list]\n    return music_list\n",
        "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    music_list = music_string.split('|')\n    music_list = [int(x) for x in music_list]\n    return music_list\n"
    ],
    "Tests": "def check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
}