{
    "Prompt": "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str], int]:\n    \"\"\"\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n    3\n    \"\"\"",
    "Completions": [
        "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str], int]:\n    \"\"\"\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if txt.isspace():\n        return [txt]\n    elif ord(txt[0]) == ord('a'):\n        return [txt[0]]\n    elif ord(txt[0]) == ord('b'):\n        return [txt[0]] + [ord(txt[1]) - ord('a')]\n    elif ord(txt[0]) == ord('c'):\n        return [txt[0]] + [ord(txt[1]) - ord('a')] + [ord(txt[2]) - ord('a')]\n    elif ord(txt[0]) == ord('d'):\n        return [txt[0]] + [ord(txt[1]) - ord('a')] + [ord(txt[2]) - ord('a')] + [ord(txt[3]) - ord('a')]\n    elif ord(txt[0]) == ord('e'):\n        return [txt[0]] + [ord(txt[1]) - ord('a')] + [ord(txt[2]) - ord('a')] + [ord(txt[3]) - ord('a')] + [ord(txt[4]) - ord('a')]\n    elif ord(txt[0]) == ord('f'):\n        return [txt[0]] + [ord(txt[1]) - ord('a')] + [ord(txt[2]) - ord('a')] + [ord(txt[3]) - ord('a",
        "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str], int]:\n    \"\"\"\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if txt == '':\n        return 0\n    return [txt[i:i+1] for i in range(len(txt)) if txt[i] != ' ']\n",
        "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str], int]:\n    \"\"\"\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if txt.isspace():\n        return [txt]\n    if ord(txt[0]) == ord('a'):\n        return [txt[0]]\n    return [txt[0]] + [txt[1:]]\n",
        "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str], int]:\n    \"\"\"\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if txt == '':\n        return 0\n    if txt[0] == ' ':\n        return 1\n    if ord(txt[0]) == ord('a'):\n        return 1\n    if ord(txt[0]) == ord('b'):\n        return 2\n    if ord(txt[0]) == ord('c'):\n        return 3\n    if ord(txt[0]) == ord('d'):\n        return 4\n    if ord(txt[0]) == ord('e'):\n        return 5\n    if ord(txt[0]) == ord('f'):\n        return 6\n    if ord(txt[0]) == ord('g'):\n        return 7\n    if ord(txt[0]) == ord('h'):\n        return 8\n    if ord(txt[0]) == ord('i'):\n        return 9\n    if ord(txt[0]) == ord('j'):\n        return 10\n    if ord(txt[0]) == ord('k'):\n        return 11\n    if ord(txt[0]) == ord('l'):\n        return 12\n    if ord(txt[0]) == ord('m'):\n        return 13\n    if ord(txt[0]) == ord('n'):\n        return 14\n    if ord(txt[0]) == ord('o'):\n        return 15\n    if ord(txt[0]) == ord('p'):\n        return 1",
        "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str], int]:\n    \"\"\"\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if txt.isspace():\n        return [txt]\n    elif ord(txt[0]) == 0:\n        return [ord(txt[0])]\n    else:\n        return [ord(txt[0]), ord(txt[1])]\n",
        "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str], int]:\n    \"\"\"\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if txt.isspace():\n        return [txt]\n    if ord(txt[0]) == 0:\n        return [ord(txt[0])]\n    return [txt[0]] + [txt[1:] for txt in txt.split(',')]\n",
        "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str], int]:\n    \"\"\"\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if txt.isspace():\n        return [txt]\n    elif txt[0] == ',' and txt[-1] == ',' and len(txt) > 1:\n        return [txt[1:-1]]\n    elif txt[0] == ',' and txt[-1] == ',' and len(txt) > 1:\n        return [txt[1:-1]]\n    elif txt[0] == ',' and len(txt) > 1:\n        return [txt[1:-1]]\n    elif txt[0] == ',' and len(txt) == 1:\n        return [txt[0]]\n    elif txt[0] == ',' and len(txt) == 0:\n        return [txt[0]]\n    elif txt[0] == ',' and len(txt) == 2:\n        return [txt[0], txt[1]]\n    elif txt[0] == ',' and len(txt) == 3:\n        return [txt[0], txt[1], txt[2]]\n    elif txt[0] == ',' and len(txt) == 4:\n        return [txt[0], txt[1], txt[2], txt[3]]\n    elif txt[0] == ',' and len(txt) == 5:\n        return [txt[0], txt[1], txt[2], txt[3], txt[4]]\n   ",
        "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str], int]:\n    \"\"\"\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if txt.isspace():\n        return [txt]\n    elif txt.count(',') > 0:\n        return [txt[i:i+2] for i in range(0, len(txt), 2)]\n    else:\n        return ord(txt[0]) - ord('a') + 1\n",
        "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str], int]:\n    \"\"\"\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if txt.isspace():\n        return txt.split()\n    else:\n        return [txt.split()]\n",
        "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str], int]:\n    \"\"\"\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if txt is None:\n        return None\n    if txt.isspace():\n        return 0\n    if txt == ',' or txt == ';':\n        return 1\n    return ord(txt[0]) - ord('a')\n",
        "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str], int]:\n    \"\"\"\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if txt == '':\n        return 0\n    if txt[0] == ' ':\n        return 1\n    return len(txt) - ord(txt[0])\n",
        "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str], int]:\n    \"\"\"\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if not txt:\n        return 0\n    if ord(txt[0]) == 0:\n        return 1\n    return ord(txt[0]) - ord('a') + 1\n",
        "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str], int]:\n    \"\"\"\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if txt == '':\n        return 0\n    if txt.isdigit():\n        return ord(txt[0]) - ord('0')\n    if txt[0] == ' ':\n        return len(txt) - 1\n    return len(txt) - 1\n",
        "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str], int]:\n    \"\"\"\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if txt.isspace():\n        return [txt]\n    else:\n        return [txt.split()]\n",
        "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str], int]:\n    \"\"\"\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if txt.isspace():\n        return [txt]\n    if ord(txt[0]) == ord('a'):\n        return [txt[0]]\n    if ord(txt[-1]) == ord('z'):\n        return [txt[-1]]\n    return [txt[i:i+2] for i in range(0, len(txt), 2)]\n",
        "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str], int]:\n    \"\"\"\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if txt.isspace():\n        return [txt]\n    elif txt.isalpha():\n        return [ord(c) for c in txt]\n    else:\n        return [ord(c) for c in txt.split(',')]\n",
        "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str], int]:\n    \"\"\"\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n    3\n    \"\"\"\n    if txt.isspace():\n        return txt.split()\n    elif ord('a') <= ord(txt[0]) <= ord('z'):\n        return [txt[0]]\n    elif ord('A') <= ord(txt[0]) <= ord('Z'):\n        return [txt[0]] + [ord(txt[0]) - ord('A')]\n    else:\n        return [ord(txt[0]) - ord('a')] + [ord(txt[0])]\n",
        "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str], int]:\n    \"\"\"\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n    3\n    \"\"\"\n    return [word for word in txt.split() if word] if txt.count(' ') > 0 else ord('a')\n",
        "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str], int]:\n    \"\"\"\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n    3\n    \"\"\"\n    words = txt.split()\n    if len(words) == 0:\n        return 0\n    if len(words) == 1:\n        return ord(words[0])\n    return ord(words[0]) - ord('a') + 1\n",
        "from typing import Union, List\n\ndef split_words(txt: str) -> Union[List[str], int]:\n    \"\"\"\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    >>> split_words('Hello world!')\n    ['Hello', 'world!']\n    >>> split_words('Hello,world!')\n    ['Hello', 'world!']\n    >>> split_words('abcdef')\n    3\n    \"\"\"\n    return [word.strip() for word in txt.split(' ')] if txt.strip() else [ord(letter) for letter in txt]\n"
    ],
    "Tests": "def check(candidate):\n    assert candidate('Hello world!') == ['Hello', 'world!']\n    assert candidate('Hello,world!') == ['Hello', 'world!']\n    assert candidate('Hello world,!') == ['Hello', 'world,!']\n    assert candidate('Hello,Hello,world !') == ['Hello,Hello,world', '!']\n    assert candidate('abcdef') == 3\n    assert candidate('aaabb') == 2\n    assert candidate('aaaBb') == 1\n    assert candidate('') == 0\n\ndef test_check():\n    check(split_words)\n\ntest_check()\n"
}