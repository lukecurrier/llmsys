{
    "Prompt": "def solve(N: int) -> str:\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000)\n    '1'\n    >>> solve(150)\n    '110'\n    >>> solve(147)\n    '1100'\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"",
    "Completions": [
        "def solve(N: int) -> str:\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000)\n    '1'\n    >>> solve(150)\n    '110'\n    >>> solve(147)\n    '1100'\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N == 0:\n        return '0'\n    if N == 1:\n        return str(N)\n    return solve(N // 2) + str(N % 2)\n",
        "def solve(N: int) -> str:\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000)\n    '1'\n    >>> solve(150)\n    '110'\n    >>> solve(147)\n    '1100'\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N == 0:\n        return '0'\n    if N == 1:\n        return str(N)\n    return str(bin(N)[2:])\n\n# Test",
        "def solve(N: int) -> str:\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000)\n    '1'\n    >>> solve(150)\n    '110'\n    >>> solve(147)\n    '1100'\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    N = str(N)\n    N = N[::-1]\n    N = int(N)\n    N = str(N)\n    N = N[::-1]\n    N = int(N)\n    N = str(N)\n    N = N[::-1]\n    N = int(N)\n    N = str(N)\n    N = N[::-1]\n    N = int(N)\n    N = str(N)\n    N = N[::-1]\n    N = int(N)\n    N = str(N)\n    N = N[::-1]\n    N = int(N)\n    N = str(N)\n    N = N[::-1]\n    N = int(N)\n    N = str(N)\n    N = N[::-1]\n    N = int(N)\n    N = str(N)\n    N = N[::-1]\n    N = int(N)\n    N = str(N)\n    N = N[::-1]\n    N = int(N)\n    N = str(N)\n    N = N[::-1]\n    N = int(N)\n    N = str(N)\n    N = N[::-1]\n    N = int(N)\n    N = str(N)\n    N = N[::-1]\n    N = int(N)\n    N = str(N)\n    N = N[::-1]\n    N = int(N)\n    N = str(N",
        "def solve(N: int) -> str:\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000)\n    '1'\n    >>> solve(150)\n    '110'\n    >>> solve(147)\n    '1100'\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # TODO: Implement the solution\n    # 1. Create a list of digits\n    # 2. Convert the list to binary number\n    # 3. Return the sum of the digits\n    # 4. Return the string of binary number\n    # 5. Return the string of binary number\n    # 6. Return the string of binary number\n    # 7. Return the string of binary number\n    # 8. Return the string of binary number\n    # 9. Return the string of binary number\n    # 10. Return the string of binary number\n    # 11. Return the string of binary number\n    # 12. Return the string of binary number\n    # 13. Return the string of binary number\n    # 14. Return the string of binary number\n    # 15. Return the string of binary number\n    # 16. Return the string of binary number\n    # 17. Return the string of binary number\n    # 18. Return the string of binary number\n    # 19. Return the string of binary number\n    # 20. Return the string of binary number\n    # 21. Return the string of binary number\n    # 22. Return the string of binary number\n    # 23. Return the string of binary number\n    # 24. Return the string of binary number\n    # 25. Return the string of binary number\n    # ",
        "def solve(N: int) -> str:\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000)\n    '1'\n    >>> solve(150)\n    '110'\n    >>> solve(147)\n    '1100'\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # TODO: Implement your code here\n    if N == 0:\n        return '0'\n    else:\n        return solve(N // 2) + str(N % 2)\n",
        "def solve(N: int) -> str:\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000)\n    '1'\n    >>> solve(150)\n    '110'\n    >>> solve(147)\n    '1100'\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N == 0:\n        return '0'\n    return solve(N // 2) + str(N % 2)\n\n# Test",
        "def solve(N: int) -> str:\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000)\n    '1'\n    >>> solve(150)\n    '110'\n    >>> solve(147)\n    '1100'\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # TODO: Implement your code here\n    if N == 0:\n        return '0'\n    if N == 1:\n        return '1'\n    return solve(N//2) + str(N%2)\n\n# Test",
        "def solve(N: int) -> str:\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000)\n    '1'\n    >>> solve(150)\n    '110'\n    >>> solve(147)\n    '1100'\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Your code here\n    return ''.join(map(str, bin(N)[2:]))\n",
        "def solve(N: int) -> str:\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000)\n    '1'\n    >>> solve(150)\n    '110'\n    >>> solve(147)\n    '1100'\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N == 0:\n        return '0'\n    if N == 1:\n        return str(N)\n    if N % 2 == 0:\n        return solve(N // 2) + '0'\n    else:\n        return solve(N // 2) + '1'\n",
        "def solve(N: int) -> str:\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000)\n    '1'\n    >>> solve(150)\n    '110'\n    >>> solve(147)\n    '1100'\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N == 0:\n        return '0'\n    return str(bin(N)[2:])\n",
        "def solve(N: int) -> str:\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000)\n    '1'\n    >>> solve(150)\n    '110'\n    >>> solve(147)\n    '1100'\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # TODO: Implement your solution here\n    # 1. Convert the integer to binary\n    # 2. Count the number of 1s in the binary number\n    # 3. Return the sum of all the digits in the binary number\n    # 4. Return the sum of the digits in the binary number\n    # 5. Return the sum of the digits in the binary number\n    # 6. Return the sum of the digits in the binary number\n    # 7. Return the sum of the digits in the binary number\n    # 8. Return the sum of the digits in the binary number\n    # 9. Return the sum of the digits in the binary number\n    # 10. Return the sum of the digits in the binary number\n    # 11. Return the sum of the digits in the binary number\n    # 12. Return the sum of the digits in the binary number\n    # 13. Return the sum of the digits in the binary number\n    # 14. Return the sum of the digits in the binary number\n    # 15. Return the sum of the digits in the binary number\n    # 16. Return the sum of the digits in the binary number\n    # 17. Return the sum of the digits in the binary number\n    # 18. Return the sum of the digits in the binary number\n    # 19. Return the sum of the digits in the binary number",
        "def solve(N: int) -> str:\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000)\n    '1'\n    >>> solve(150)\n    '110'\n    >>> solve(147)\n    '1100'\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # TODO: Implement your code here\n    # 1000 = 100 + 00 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0",
        "def solve(N: int) -> str:\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000)\n    '1'\n    >>> solve(150)\n    '110'\n    >>> solve(147)\n    '1100'\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # TODO: Implement your solution here\n    if N == 0:\n        return '0'\n    return str(bin(N)[2:])\n",
        "def solve(N: int) -> str:\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000)\n    '1'\n    >>> solve(150)\n    '110'\n    >>> solve(147)\n    '1100'\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # TODO: Implement your solution here\n    return str(bin(N)[2:])\n",
        "def solve(N: int) -> str:\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000)\n    '1'\n    >>> solve(150)\n    '110'\n    >>> solve(147)\n    '1100'\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # TODO: Implement your solution here\n    return str(bin(N)[2:])\n",
        "def solve(N: int) -> str:\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000)\n    '1'\n    >>> solve(150)\n    '110'\n    >>> solve(147)\n    '1100'\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # TODO: Implement your solution here\n    return str(bin(N)[2:])\n",
        "def solve(N: int) -> str:\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000)\n    '1'\n    >>> solve(150)\n    '110'\n    >>> solve(147)\n    '1100'\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # TODO: Implement the function\n    # TODO: Return the sum of the digits of the binary representation of N\n    # TODO: Return the string of binary number\n    # TODO: Return the sum of the digits of the binary representation of N\n    # TODO: Return the string of binary number\n    # TODO: Return the sum of the digits of the binary representation of N\n    # TODO: Return the string of binary number\n    # TODO: Return the sum of the digits of the binary representation of N\n    # TODO: Return the string of binary number\n    # TODO: Return the sum of the digits of the binary representation of N\n    # TODO: Return the string of binary number\n    # TODO: Return the sum of the digits of the binary representation of N\n    # TODO: Return the string of binary number\n    # TODO: Return the sum of the digits of the binary representation of N\n    # TODO: Return the string of binary number\n    # TODO: Return the sum of the digits of the binary representation of N\n    # TODO: Return the string of binary number\n    # TODO: Return the sum of the digits of the binary representation of N\n    # TODO: Return the string of binary number\n    # TODO: Return the sum of the digits of the binary representation of N\n    # TODO: Return the string of binary number\n    # TODO: Return the sum of the digits of the binary representation of N\n    # TODO: Return the string of binary number\n    # TODO: Return the sum",
        "def solve(N: int) -> str:\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000)\n    '1'\n    >>> solve(150)\n    '110'\n    >>> solve(147)\n    '1100'\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N == 0:\n        return '0'\n    if N == 1:\n        return str(N)\n    return solve(N // 2) + str(N % 2)\n",
        "def solve(N: int) -> str:\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000)\n    '1'\n    >>> solve(150)\n    '110'\n    >>> solve(147)\n    '1100'\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N == 0:\n        return '0'\n    else:\n        return str(bin(N)[2:])\n",
        "def solve(N: int) -> str:\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n    >>> solve(1000)\n    '1'\n    >>> solve(150)\n    '110'\n    >>> solve(147)\n    '1100'\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N == 0:\n        return '0'\n    if N == 1:\n        return '1'\n    if N % 2 == 0:\n        return solve(N // 2) + '0'\n    else:\n        return solve(N // 2) + '1'\n"
    ],
    "Tests": "def check(candidate):\n    assert candidate(1000) == '1'\n    assert candidate(150) == '110'\n    assert candidate(147) == '1100'\n    assert candidate(333) == '1001'\n    assert candidate(963) == '10010'\n\ndef test_check():\n    check(solve)\n\ntest_check()\n"
}