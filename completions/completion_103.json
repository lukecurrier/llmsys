{
    "Prompt": "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n    6\n    >>> hex_key('2020')\n    2\n    \"\"\"",
    "Completions": [
        "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n    6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    if num == '':\n        return 0\n    if len(num) == 1:\n        return 1\n    if num[0] == 'A':\n        return 10\n    if num[0] == 'B':\n        return 11\n    if num[0] == 'C':\n        return 12\n    if num[0] == 'D':\n        return 13\n    if num[0] == 'E':\n        return 14\n    if num[0] == 'F':\n        return 15\n    if num[0] == '0':\n        return 2\n    if num[0] == '1':\n        return 3\n    if num[0] == '2':\n        return 4\n    if num[0] == '3':\n        return 5\n    if num[0] == '4':\n        return 6\n    if num[0] == '5':\n        return 7\n    if num[0] == '6':\n        return 8\n    if num[0] == '7':\n        return 9\n    if num[0] == '8':\n        return 10\n    if num[0] == '9':\n        return 11\n    if num[0] == 'A':\n        return 12\n    if num[0] == 'B':\n        return 13\n    if num[0] == 'C':\n        return 14",
        "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n    6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    num = int(num)\n    if num < 0:\n        return 0\n    if num == 0:\n        return 0\n    if num == 1:\n        return 1\n    if num == 2:\n        return 2\n    if num == 3:\n        return 3\n    if num == 4:\n        return 4\n    if num == 5:\n        return 5\n    if num == 6:\n        return 6\n    if num == 7:\n        return 7\n    if num == 8:\n        return 8\n    if num == 9:\n        return 9\n    if num == 10:\n        return 10\n    if num == 11:\n        return 11\n    if num == 12:\n        return 12\n    if num == 13:\n        return 13\n    if num == 14:\n        return 14\n    if num == 15:\n        return 15\n    if num == 16:\n        return 16\n    if num == 17:\n        return 17\n    if num == 18:\n        return 18\n    if num == 19:\n        return 19\n    if num == 20:\n        return 20\n    if num == 21:\n        return 21\n    if num == 22:\n        return 22\n    if num",
        "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n    6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    if num == '':\n        return 0\n    if len(num) == 1:\n        return 1\n    if num[0] == 'A' or num[0] == 'B':\n        return 2\n    if num[0] == 'C' or num[0] == 'D':\n        return 3\n    if num[0] == 'E' or num[0] == 'F':\n        return 4\n    if num[0] == 'A':\n        return 5\n    if num[0] == 'B':\n        return 6\n    if num[0] == 'C':\n        return 7\n    if num[0] == 'D':\n        return 8\n    if num[0] == 'E':\n        return 9\n    if num[0] == 'F':\n        return 10\n    if num[0] == '0':\n        return 11\n    if num[0] == '1':\n        return 12\n    if num[0] == '2':\n        return 13\n    if num[0] == '3':\n        return 14\n    if num[0] == '4':\n        return 15\n    if num[0] == '5':\n        return 16\n    if num[0] == '6':\n        return 17\n    if num[0] == '7':\n        return 18\n    if num",
        "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n    6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    if num == '':\n        return 0\n    if num[0] == '0':\n        return 0\n    if num[0] == 'A' or num[0] == 'B' or num[0] == 'C' or num[0] == 'D' or num[0] == 'E' or num[0] == 'F':\n        return 1\n    if num[0] == '1':\n        return 2\n    if num[0] == '2':\n        return 3\n    if num[0] == '3':\n        return 4\n    if num[0] == '4':\n        return 5\n    if num[0] == '5':\n        return 6\n    if num[0] == '6':\n        return 7\n    if num[0] == '7':\n        return 8\n    if num[0] == '8':\n        return 9\n    if num[0] == '9':\n        return 10\n    if num[0] == 'A':\n        return 11\n    if num[0] == 'B':\n        return 12\n    if num[0] == 'C':\n        return 13\n    if num[0] == 'D':\n        return 14\n    if num[0] == 'E':\n        return 15\n    if num[0] == 'F':\n        return 16\n   ",
        "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n    6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    # TODO: implement your function here\n    # 1. check if the input is a string\n    if not isinstance(num, str):\n        raise TypeError('Input must be a string')\n    # 2. check if the input is a hexadecimal number\n    if not isinstance(num, str):\n        raise TypeError('Input must be a hexadecimal number')\n    # 3. check if the input is a valid hexadecimal number\n    if not isinstance(num, str):\n        raise TypeError('Input must be a valid hexadecimal number')\n    # 4. check if the input is a valid hexadecimal number\n    if not isinstance(num, str):\n        raise TypeError('Input must be a valid hexadecimal number')\n    # 5. check if the input is a valid hexadecimal number\n    if not isinstance(num, str):\n        raise TypeError('Input must be a valid hexadecimal number')\n    # 6. check if the input is a valid hexadecimal number\n    if not isinstance(num, str):\n        raise TypeError('Input must be a valid hexadecimal number')\n    # 7. check if the input is a valid hexadecimal number\n    if not isinstance(num, str):\n        raise TypeError('Input must be a valid hexadecimal number')\n    # 8. check if the input is a valid hexadecimal number",
        "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n    6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    # TODO: Write your code here\n    if num == '':\n        return 0\n    if len(num) == 0:\n        return 0\n    if num[0] == '0':\n        return 0\n    if num[0] == 'A':\n        return 1\n    if num[0] == 'B':\n        return 2\n    if num[0] == 'C':\n        return 3\n    if num[0] == 'D':\n        return 4\n    if num[0] == 'E':\n        return 5\n    if num[0] == 'F':\n        return 6\n    if num[0] == 'A':\n        return 1\n    if num[0] == 'B':\n        return 2\n    if num[0] == 'C':\n        return 3\n    if num[0] == 'D':\n        return 4\n    if num[0] == 'E':\n        return 5\n    if num[0] == 'F':\n        return 6\n    if num[0] == 'A':\n        return 1\n    if num[0] == 'B':\n        return 2\n    if num[0] == 'C':\n        return 3\n    if num[0] == 'D':\n        return 4\n    if num[0] == 'E':\n        return 5\n    if num[0] == 'F':\n        return 6\n    if num",
        "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n    6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    if num == '':\n        return 0\n    if len(num) == 1:\n        return 1\n    if num[0] == 'A' or num[0] == 'B':\n        return 2\n    if num[0] == 'C' or num[0] == 'D':\n        return 3\n    if num[0] == 'E' or num[0] == 'F':\n        return 4\n    if num[0] == 'A' or num[0] == 'B' or num[0] == 'C' or num[0] == 'D':\n        return 5\n    if num[0] == 'E' or num[0] == 'F':\n        return 6\n    if num[0] == 'A' or num[0] == 'B' or num[0] == 'C' or num[0] == 'D' or num[0] == 'E':\n        return 7\n    if num[0] == 'A' or num[0] == 'B' or num[0] == 'C' or num[0] == 'D' or num[0] == 'E' or num[0] == 'F':\n        return 8\n    if num[0] == 'A' or num[0] == 'B' or num[0] == 'C' or num[0] == '",
        "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n    6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    if num == '':\n        return 0\n    if len(num) == 1:\n        return 1\n    if num[0] == '0':\n        return 0\n    if num[0] == 'A':\n        return 1\n    if num[0] == 'B':\n        return 2\n    if num[0] == 'C':\n        return 3\n    if num[0] == 'D':\n        return 4\n    if num[0] == 'E':\n        return 5\n    if num[0] == 'F':\n        return 6\n    if num[0] == 'A':\n        return 1\n    if num[0] == 'B':\n        return 2\n    if num[0] == 'C':\n        return 3\n    if num[0] == 'D':\n        return 4\n    if num[0] == 'E':\n        return 5\n    if num[0] == 'F':\n        return 6\n    if num[0] == 'A':\n        return 1\n    if num[0] == 'B':\n        return 2\n    if num[0] == 'C':\n        return 3\n    if num[0] == 'D':\n        return 4\n    if num[0] == 'E':\n        return 5\n    if num[0] == 'F':\n        return 6\n    if num[0] == 'A':\n       ",
        "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n    6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    if num == '':\n        return 0\n    if len(num) == 1:\n        return 1\n    if num[0] == '0':\n        return 0\n    if num[0] == '1':\n        return 1\n    if num[0] == '2':\n        return 2\n    if num[0] == '3':\n        return 3\n    if num[0] == '4':\n        return 4\n    if num[0] == '5':\n        return 5\n    if num[0] == '6':\n        return 6\n    if num[0] == '7':\n        return 7\n    if num[0] == '8':\n        return 8\n    if num[0] == '9':\n        return 9\n    if num[0] == 'A':\n        return 10\n    if num[0] == 'B':\n        return 11\n    if num[0] == 'C':\n        return 12\n    if num[0] == 'D':\n        return 13\n    if num[0] == 'E':\n        return 14\n    if num[0] == 'F':\n        return 15\n    if num[0] == 'A':\n        return 16\n    if num[0] == 'B':\n        return 17\n    if num[0] == 'C':\n        return 18\n    if",
        "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n    6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    if num == '':\n        return 0\n    if num[0] == '0':\n        return 0\n    if num[0] == 'A':\n        return 1\n    if num[0] == 'B':\n        return 2\n    if num[0] == 'C':\n        return 3\n    if num[0] == 'D':\n        return 4\n    if num[0] == 'E':\n        return 5\n    if num[0] == 'F':\n        return 6\n    if num[0] == 'A':\n        return 7\n    if num[0] == 'B':\n        return 8\n    if num[0] == 'C':\n        return 9\n    if num[0] == 'D':\n        return 10\n    if num[0] == 'E':\n        return 11\n    if num[0] == 'F':\n        return 12\n    if num[0] == 'A':\n        return 13\n    if num[0] == 'B':\n        return 14\n    if num[0] == 'C':\n        return 15\n    if num[0] == 'D':\n        return 16\n    if num[0] == 'E':\n        return 17\n    if num[0] == 'F':\n        return 18\n    if num[0] == 'A':\n        return 19\n   ",
        "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n    6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    if num == '':\n        return 0\n    if len(num) == 1:\n        return 1\n    if num[0] == 'A' or num[0] == 'B' or num[0] == 'C' or num[0] == 'D' or num[0] == 'E' or num[0] == 'F':\n        return 1\n    if num[0] == '1':\n        return 2\n    if num[0] == '2':\n        return 3\n    if num[0] == '3':\n        return 4\n    if num[0] == '4':\n        return 5\n    if num[0] == '5':\n        return 6\n    if num[0] == '6':\n        return 7\n    if num[0] == '7':\n        return 8\n    if num[0] == '8':\n        return 9\n    if num[0] == '9':\n        return 10\n    if num[0] == 'A':\n        return 11\n    if num[0] == 'B':\n        return 12\n    if num[0] == 'C':\n        return 13\n    if num[0] == 'D':\n        return 14\n    if num[0] == 'E':\n        return 15\n    if num[0] == 'F':\n        return 16\n   ",
        "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n    6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    if num == '':\n        return 0\n    if len(num) == 0:\n        return 0\n    if num[0] == '0':\n        return 0\n    if num[0] == '1':\n        return 1\n    if num[0] == '2':\n        return 2\n    if num[0] == '3':\n        return 3\n    if num[0] == '4':\n        return 4\n    if num[0] == '5':\n        return 5\n    if num[0] == '6':\n        return 6\n    if num[0] == '7':\n        return 7\n    if num[0] == '8':\n        return 8\n    if num[0] == '9':\n        return 9\n    if num[0] == 'A':\n        return 10\n    if num[0] == 'B':\n        return 11\n    if num[0] == 'C':\n        return 12\n    if num[0] == 'D':\n        return 13\n    if num[0] == 'E':\n        return 14\n    if num[0] == 'F':\n        return 15\n    if num[0] == 'A':\n        return 16\n    if num[0] == 'B':\n        return 17\n    if num[0] == 'C':\n        return 18\n    if",
        "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n    6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    num = int(num, 16)\n    return num % 10\n\n",
        "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n    6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    # TODO: write your code here\n    if num == '':\n        return 0\n    if len(num) == 1:\n        return 1\n    if num[0] == '0':\n        return 0\n    if num[0] == 'A':\n        return 1\n    if num[0] == 'B':\n        return 2\n    if num[0] == 'C':\n        return 3\n    if num[0] == 'D':\n        return 4\n    if num[0] == 'E':\n        return 5\n    if num[0] == 'F':\n        return 6\n    if num[0] == 'A':\n        return 1\n    if num[0] == 'B':\n        return 2\n    if num[0] == 'C':\n        return 3\n    if num[0] == 'D':\n        return 4\n    if num[0] == 'E':\n        return 5\n    if num[0] == 'F':\n        return 6\n    if num[0] == 'A':\n        return 1\n    if num[0] == 'B':\n        return 2\n    if num[0] == 'C':\n        return 3\n    if num[0] == 'D':\n        return 4\n    if num[0] == 'E':\n        return 5\n    if num[0] == 'F':\n        return 6\n    if num",
        "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n    6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    if num == '':\n        return 0\n    num = int(num)\n    if num < 0:\n        return 0\n    if num < 10:\n        return 1\n    if num < 100:\n        return 2\n    if num < 1000:\n        return 3\n    if num < 10000:\n        return 4\n    if num < 100000:\n        return 5\n    if num < 1000000:\n        return 6\n    if num < 10000000:\n        return 7\n    if num < 100000000:\n        return 8\n    if num < 1000000000:\n        return 9\n    if num < 10000000000:\n        return 10\n    if num < 100000000000:\n        return 11\n    if num < 1000000000000:\n        return 12\n    if num < 10000000000000:\n        return 13\n    if num < 100000000000000:\n        return 14\n    if num < 1000",
        "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n    6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    if num == '':\n        return 0\n    if len(num) == 0:\n        return 0\n    if num[0] == '0':\n        return 0\n    num = num.replace('0', '')\n    num = num.replace('1', '')\n    num = num.replace('2', '')\n    num = num.replace('3', '')\n    num = num.replace('4', '')\n    num = num.replace('5', '')\n    num = num.replace('6', '')\n    num = num.replace('7', '')\n    num = num.replace('8', '')\n    num = num.replace('9', '')\n    num = num.replace('A', '')\n    num = num.replace('B', '')\n    num = num.replace('C', '')\n    num = num.replace('D', '')\n    num = num.replace('E', '')\n    num = num.replace('F', '')\n    num = num.replace('1', '')\n    num = num.replace('2', '')\n    num = num.replace('3', '')\n    num = num.replace('4', '')\n    num = num.replace('5', '')\n    num = num.replace('6', '')\n    num = num.replace('7', '')\n    num = num.replace('8', '')\n    num = num.replace('9', '')\n    num = num.replace('A', '')\n    num =",
        "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n    6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    if num == '':\n        return 0\n    if len(num) == 0:\n        return 0\n    if num[0] == '0':\n        return 0\n    if num[0] == '1':\n        return 1\n    if num[0] == '2':\n        return 2\n    if num[0] == '3':\n        return 3\n    if num[0] == '4':\n        return 4\n    if num[0] == '5':\n        return 5\n    if num[0] == '6':\n        return 6\n    if num[0] == '7':\n        return 7\n    if num[0] == '8':\n        return 8\n    if num[0] == '9':\n        return 9\n    if num[0] == 'A':\n        return 10\n    if num[0] == 'B':\n        return 11\n    if num[0] == 'C':\n        return 12\n    if num[0] == 'D':\n        return 13\n    if num[0] == 'E':\n        return 14\n    if num[0] == 'F':\n        return 15\n    return 0\n",
        "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n    6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    if num == '':\n        return 0\n    if len(num) == 0:\n        return 0\n    if num[0] == '0':\n        return 0\n    if num[0] == 'A' or num[0] == 'B':\n        return 1\n    if num[0] == 'C' or num[0] == 'D':\n        return 2\n    if num[0] == 'E' or num[0] == 'F':\n        return 3\n    if num[0] == 'A' or num[0] == 'B' or num[0] == 'C' or num[0] == 'D':\n        return 4\n    if num[0] == 'E' or num[0] == 'F':\n        return 5\n    if num[0] == 'A' or num[0] == 'B' or num[0] == 'C' or num[0] == 'D':\n        return 6\n    if num[0] == 'E' or num[0] == 'F':\n        return 7\n    if num[0] == 'A' or num[0] == 'B' or num[0] == 'C' or num[0] == 'D':\n        return 8\n    if num[0] == 'E' or num[0] == 'F':\n        return 9\n    if",
        "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n    6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    if num == '':\n        return 0\n    if num[0] == '0':\n        return 0\n    if num[0] == '1':\n        return 1\n    if num[0] == '2':\n        return 2\n    if num[0] == '3':\n        return 3\n    if num[0] == '4':\n        return 4\n    if num[0] == '5':\n        return 5\n    if num[0] == '6':\n        return 6\n    if num[0] == '7':\n        return 7\n    if num[0] == '8':\n        return 8\n    if num[0] == '9':\n        return 9\n    if num[0] == 'A':\n        return 10\n    if num[0] == 'B':\n        return 11\n    if num[0] == 'C':\n        return 12\n    if num[0] == 'D':\n        return 13\n    if num[0] == 'E':\n        return 14\n    if num[0] == 'F':\n        return 15\n    return 0\n",
        "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    >>> hex_key('AB')\n    1\n    >>> hex_key('1077E')\n    2\n    >>> hex_key('ABED1A33')\n    4\n    >>> hex_key('123456789ABCDEF0')\n    6\n    >>> hex_key('2020')\n    2\n    \"\"\"\n    if num == '':\n        return 0\n    if len(num) == 1:\n        return 1\n    if num[0] == '0':\n        return 0\n    if num[0] == 'A':\n        return 2\n    if num[0] == 'B':\n        return 3\n    if num[0] == 'C':\n        return 4\n    if num[0] == 'D':\n        return 5\n    if num[0] == 'E':\n        return 6\n    if num[0] == 'F':\n        return 7\n    if num[0] == 'A':\n        return 1\n    if num[0] == 'B':\n        return 2\n    if num[0] == 'C':\n        return 3\n    if num[0] == 'D':\n        return 4\n    if num[0] == 'E':\n        return 5\n    if num[0] == 'F':\n        return 6\n    if num[0] == '0':\n        return 0\n    if num[0] == '1':\n        return 1\n    if num[0] == '2':\n        return 2\n    if num[0] == '3':\n        return 3\n    if num[0] == '4':\n        return 4\n    if num[0] == '5':\n        return 5\n    if num[0] == '6':\n       "
    ],
    "Tests": "def check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E') == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00') == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
}