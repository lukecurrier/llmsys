{
    "Prompt": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"",
    "Completions": [
        "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace(')', '(').replace(')', ')')\n    paren_string = paren_string.replace(')', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace(')', '(').replace(')', ')')\n    paren_string = paren_string.replace(')', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace(')', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace(')', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace(')', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')",
        "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(', ' ( ')\n    paren_string = paren_string.replace(')', ' ) ')\n    paren_string = paren_string.replace('{', ' ( ')\n    paren_string = paren_string.replace('}', ' ) ')\n    paren_string = paren_string.replace('{', ' ( ')\n    paren_string = paren_string.replace('}', ' ) ')\n    paren_string = paren_string.replace('{', ' ( ')\n    paren_string = paren_string.replace('}', ' ) ')\n    paren_string = paren_string.replace('{', ' ( ')\n    paren_string = paren_string.replace('}', ' ) ')\n    paren_string = paren_string.replace('{', ' ( ')\n    paren_string = paren_string.replace('}', ' ) ')\n    paren_string = paren_string.replace('{', ' ( ')\n    paren_string = paren_string.replace('}', ' ) ')\n    paren_string = paren_string.replace('{', ' ( ')\n    paren_string = paren_string.replace('}', ' ) ')\n    paren_string = paren_string.replace('{', ' ( ')\n    paren_string = paren_string.replace('}', ' ) ')\n    paren_string = paren_string.replace('{', ' ( ')\n    paren_string = paren",
        "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(i) for i in paren_string.split('(')]\n",
        "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace(')', '(').replace(')', ')')\n    paren_string = paren_string.replace(')', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace(')', '(').replace(')', ')')\n    paren_string = paren_string.replace(')', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace(')', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace(')', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace(')', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')",
        "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('{', '{').replace('}', '}')\n    paren_string = paren_string.replace('[[', '[').replace(']]', ']')\n    paren_string = paren_string.replace('[[', '{').replace(']]', ']')\n    paren_string = paren_string.replace('[[', '{').replace(']]', ']')\n    paren_string = paren_string.replace('[[', '{').replace(']]', ']')\n    paren_string = paren_string.replace('[[', '{').replace(']]', ']')\n    paren_string = paren_string.replace('[[', '{').replace(']]', ']')\n    paren_string = paren_string.replace('[[', '{').replace(']]', ']')\n    paren_string = paren_string.replace('[[', '{').replace(']]', ']')\n    paren_string = paren_string.replace('[[', '{').replace(']]', ']')\n    paren_string = paren_string.replace('[[', '{').replace(']]', ']')\n    paren_string = paren_string.replace('[[', '{').replace(']]', ']')\n    paren_string = paren_string.replace('[[', '{').replace(']]', ']')\n    paren_string = paren_",
        "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # TODO: Implement this function\n    pass\n\n",
        "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')",
        "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(', '(').replace(')', ')').replace('(', '(').replace(')', ''))\n    paren_string = paren_string.replace('{', '{').replace('}', '}')\n    paren_string = paren_string.replace('[[', '[').replace(']]', ']')\n    paren_string = paren_string.replace('[[', '{').replace(']]', ']').replace('{', '{').replace('}', '}')\n    paren_string = paren_string.replace('[[', '{').replace(']]', ']').replace('{', '{').replace('}', '}')\n    paren_string = paren_string.replace('[[', '{').replace(']]', ']').replace('{', '{').replace('}', '}')\n    paren_string = paren_string.replace('[[', '{').replace(']]', ']').replace('{', '{').replace('}', '}')\n    paren_string = paren_string.replace('[[', '{').replace(']]', ']').replace('{', '{').replace('}', '}')\n    paren_string = paren_string.replace('[[', '{').replace(']]', ']').replace('{', '{').replace('}', '}')\n    paren_string = paren_string.replace('[[', '{').replace(']]', ']').replace('{', '{').replace",
        "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('{', '{').replace('}', '}')\n    paren_string = paren_string.replace('{', '{').replace('}', '}')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('{', '{').replace('}', '}')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('{', '{').replace('}', '}')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('{', '{').replace('}', '}')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('{', '{').replace('}', '}')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('{', '{').replace('}', '}')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('{', '{').replace('}', '}')",
        "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    if not paren_string:\n        return []\n    paren_string = paren_string.strip()\n    if paren_string == '':\n        return []\n    paren_string = paren_string.split(')')\n    return [int(i) for i in paren_string]\n",
        "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace(')', '(').replace(')', ')')\n    paren_string = paren_string.replace(')', '(').replace(')', ')')\n    paren_string = paren_string.replace(')', '(').replace(')', ')')\n    paren_string = paren_string.replace(')', '(').replace(')', ')')\n    paren_string = paren_string.replace(')', '(').replace(')', ')')\n    paren_string = paren_string.replace(')', '(').replace(')', ')')\n    paren_string = paren_string.replace(')', '(').replace(')', ')')\n    paren_string = paren_string.replace(')', '(').replace(')', ')')\n    paren_string = paren_string.replace(')', '(').replace(')', ')')\n    paren_string = paren_string.replace(')', '(').replace(')', ')')\n    paren_string = paren_string.replace(')', '(').replace(')', ')')",
        "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [len(paren_string) - 1 - len(paren_string[i]) for i in range(len(paren_string))]\n",
        "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(paren_string.split(' ')[0]) for paren_string in paren_string.split('(')]\n",
        "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [int(x) for x in paren_string.split(')(')]\n",
        "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('{', '{').replace('}', '}')\n    paren_string = paren_string.replace('[[', '[').replace(']]', ']')\n    paren_string = paren_string.replace('[[', '{').replace(']]', ']')\n    paren_string = paren_string.replace('[[', '{').replace(']]', ']')\n    paren_string = paren_string.replace('[[', '{').replace(']]', ']')\n    paren_string = paren_string.replace('[[', '{').replace(']]', ']')\n    paren_string = paren_string.replace('[[', '{').replace(']]', ']')\n    paren_string = paren_string.replace('[[', '{').replace(']]', ']')\n    paren_string = paren_string.replace('[[', '{').replace(']]', ']')\n    paren_string = paren_string.replace('[[', '{').replace(']]', ']')\n    paren_string = paren_string.replace('[[', '{').replace(']]', ']')\n    paren_string = paren_string.replace('[[', '{').replace(']]', ']')\n    paren_string = paren_string.replace('[[', '{').replace(']]', ']')\n    paren_string = paren_",
        "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')",
        "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    result = []\n    for i, c in enumerate(paren_string):\n        if c == '(':\n            result.append(i)\n        elif c == ')':\n            result.append(i)\n            if result[-1] == 0:\n                result.pop()\n    return result\n\n",
        "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace(')', '(').replace(')', ')')\n    paren_string = paren_string.replace(')', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace(')', '(').replace(')', ')')\n    paren_string = paren_string.replace(')', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace(')', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace(')', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace(')', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')",
        "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    return [0] + [len(group) for group in paren_string.split('(')]\n",
        "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace(')', '(').replace(')', ')')\n    paren_string = paren_string.replace(')', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace(')', '(').replace(')', ')')\n    paren_string = paren_string.replace(')', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace(')', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace(')', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')\n    paren_string = paren_string.replace(')', '(').replace(')', ')')\n    paren_string = paren_string.replace('(', '(').replace(')', ')')"
    ],
    "Tests": "def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
}