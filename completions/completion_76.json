{
    "Prompt": "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int, int]:\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n    (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"",
    "Completions": [
        "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int, int]:\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n    (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\n    return (num // 10, num % 10)\n<|endoftext|>",
        "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int, int]:\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n    (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n\n    if num % 10 == 0:\n        return (0, 0)\n\n    while num > 0:\n        if num % 10 == 0:\n            odd_count += 1\n        else:\n            even_count += 1\n        num //= 10\n\n    return (even_count, odd_count)\n",
        "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int, int]:\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n    (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\n    if num < 0:\n        return (-1, 0)\n    if num == 0:\n        return (0, 0)\n    if num % 10 == 0:\n        return (0, 1)\n    if num % 10 == 1:\n        return (1, 1)\n    if num % 10 == 2:\n        return (1, 2)\n    if num % 10 == 3:\n        return (2, 1)\n    if num % 10 == 4:\n        return (2, 2)\n    if num % 10 == 5:\n        return (3, 1)\n    if num % 10 == 6:\n        return (3, 2)\n    if num % 10 == 7:\n        return (4, 1)\n    if num % 10 == 8:\n        return (4, 2)\n    if num % 10 == 9:\n        return (5, 1)\n    return (0, 0)\n",
        "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int, int]:\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n    (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\n    return (num // 10, num % 10)\n",
        "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int, int]:\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n    (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\n    if num < 0:\n        return (-1, 0)\n    if num == 0:\n        return (0, 0)\n    if num == 1:\n        return (1, 0)\n    if num == 2:\n        return (0, 1)\n    if num == 3:\n        return (1, 1)\n    if num == 4:\n        return (0, 2)\n    if num == 5:\n        return (1, 2)\n    if num == 6:\n        return (0, 3)\n    if num == 7:\n        return (1, 3)\n    if num == 8:\n        return (0, 4)\n    if num == 9:\n        return (1, 4)\n    if num == 10:\n        return (0, 5)\n    if num == 11:\n        return (1, 5)\n    if num == 12:\n        return (0, 6)\n    if num == 13:\n        return (1, 6)\n    if num == 14:\n        return (0, 7)\n    if num == 15:\n        return (1, 7)\n    if num == 16:\n        return (0, 8)\n    if num == 17:\n        return (1, 8)\n    if num == 18",
        "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int, int]:\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n    (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\n    return (num // 10, num % 10)\n",
        "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int, int]:\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n    (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\n    return (num // 10, num % 10)\n",
        "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int, int]:\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n    (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 10 == 0:\n            odd_count += 1\n        else:\n            even_count += 1\n        num //= 10\n    return even_count, odd_count\n",
        "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int, int]:\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n    (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\n    count_even = 0\n    count_odd = 0\n    for i in str(num):\n        if i % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return count_even, count_odd\n",
        "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int, int]:\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n    (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for digit in str(num):\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count, odd_count\n",
        "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int, int]:\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n    (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\n    if num < 0:\n        return (-1, 0)\n    if num == 0:\n        return (0, 0)\n    if num == 1:\n        return (1, 0)\n    if num == 2:\n        return (0, 1)\n    if num == 3:\n        return (1, 1)\n    if num == 4:\n        return (0, 2)\n    if num == 5:\n        return (1, 2)\n    if num == 6:\n        return (0, 3)\n    if num == 7:\n        return (1, 3)\n    if num == 8:\n        return (0, 4)\n    if num == 9:\n        return (1, 4)\n    return (-1, 0)\n",
        "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int, int]:\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n    (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\n    return (num // 10, num % 10)\n<|endoftext|>",
        "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int, int]:\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n    (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\n    if num < 0:\n        return (-1, 0)\n    if num == 0:\n        return (0, 0)\n    if num == 1:\n        return (1, 0)\n    if num == 2:\n        return (0, 1)\n    if num == 3:\n        return (1, 1)\n    if num == 4:\n        return (2, 0)\n    if num == 5:\n        return (1, 2)\n    if num == 6:\n        return (0, 2)\n    if num == 7:\n        return (1, 3)\n    if num == 8:\n        return (2, 1)\n    if num == 9:\n        return (0, 3)\n    return (0, 0)\n",
        "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int, int]:\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n    (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\n    return (num // 10, num % 10)\n",
        "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int, int]:\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n    (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\n    return (num // 10, num % 10)\n",
        "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int, int]:\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n    (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\n    return (num // 10, num % 10)\n",
        "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int, int]:\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n    (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\n    return (num // 10, num % 10)\n<|endoftext|>",
        "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int, int]:\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n    (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\n    count_even = 0\n    count_odd = 0\n    for digit in str(num):\n        if digit % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return count_even, count_odd\n",
        "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int, int]:\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n    (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    if num < 0:\n        return (0, 0)\n    if num < 10:\n        return (0, 1)\n    if num < 100:\n        return (0, 2)\n    if num < 1000:\n        return (0, 3)\n    if num < 10000:\n        return (0, 4)\n    if num < 100000:\n        return (0, 5)\n    if num < 1000000:\n        return (0, 6)\n    if num < 10000000:\n        return (0, 7)\n    if num < 100000000:\n        return (0, 8)\n    if num < 1000000000:\n        return (0, 9)\n    return (0, 0)\n",
        "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int, int]:\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n    (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\n    return (num // 10, num % 10)\n<|endoftext|>"
    ],
    "Tests": "def check(candidate):\n    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
}