"def make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 1:\n        return string\n    if len(string) == 2:\n        return string + string[0]\n    if string[0] == string[-1]:\n        return make_palindrome(string[1:-1]) + string[0]\n    return string[1:-1] + string[0] + string[1:-1]\n"