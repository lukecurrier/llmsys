{
    "Prompt": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"",
    "Completions": [
        "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')",
        "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    brackets_list = brackets.split('>')\n    for bracket in brackets_list:\n        if bracket == '<':\n            if brackets_list.index(bracket) == len(brackets_list) - 1:\n                return True\n        elif bracket == '>':\n            if brackets_list.index(bracket) == 0:\n                return True\n    return False\n\n",
        "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    brackets_list = brackets.split('>')\n    for bracket in brackets_list:\n        if bracket != '<':\n            return False\n    return True\n\n",
        "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    if not brackets:\n        return False\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets",
        "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    brackets = brackets.split('>')\n    for bracket in brackets:\n        if bracket == '<':\n            if brackets.index(bracket) == 0:\n                return False\n        elif bracket == '>':\n            if brackets.index(bracket) == len(brackets) - 1:\n                return False\n        else:\n            return False\n    return True\n\n",
        "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    if not brackets:\n        return False\n    brackets = brackets.split('>')\n    for bracket in brackets:\n        if bracket == '<':\n            if brackets.index(bracket) == 0:\n                return False\n        elif bracket == '>':\n            if brackets.index(bracket) == len(brackets) - 1:\n                return False\n        else:\n            return False\n    return True\n\n",
        "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    if brackets == '<>':\n        return True\n    if brackets == '>':\n        return False\n    if brackets == '<':\n        return True\n    if brackets == '>':\n        return False\n    if brackets == '><':\n        return True\n    if brackets == '>>':\n        return True\n    if brackets == '>>>' and brackets == '>>':\n        return True\n    if brackets == '>>>' and brackets == '>>':\n        return True\n    if brackets == '>>>' and brackets == '>>':\n        return True\n    if brackets == '>>>' and brackets == '>>':\n        return True\n    if brackets == '>>>' and brackets == '>>':\n        return True\n    if brackets == '>>>' and brackets == '>>':\n        return True\n    if brackets == '>>>' and brackets == '>>':\n        return True\n    if brackets == '>>>' and brackets == '>>':\n        return True\n    if brackets == '>>>' and brackets == '>>':\n        return True\n    if brackets == '>>>' and brackets == '>>':\n        return True\n    if brackets == '>>>' and brackets == '>>':\n        return True\n    if brackets == '>>>' and brackets == '>>':\n        return True\n    if brackets == '>>>' and brackets == '>>':\n        return True\n    if brackets == '>>>' and brackets == '>>':\n        return True\n    if brackets == '>>>' and brackets == '>>':\n        return True\n   ",
        "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    brackets_map = {\n        '<': '>',\n        '>': '<',\n    }\n    for bracket in brackets:\n        if bracket not in brackets_map:\n            return False\n        brackets_map[bracket] = brackets_map[bracket] + '>'\n    return True\n\n",
        "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    brackets_list = brackets.split('>')\n    for bracket in brackets_list:\n        if bracket == '<':\n            if brackets_list.index(bracket) == 0:\n                return True\n        elif bracket == '>':\n            if brackets_list.index(bracket) == len(brackets_list) - 1:\n                return True\n    return False\n\n",
        "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    if not brackets:\n        return False\n\n    brackets_map = {\n        '<': '>',\n        '>': '</',\n    }\n\n    for bracket in brackets:\n        if bracket not in brackets_map:\n            return False\n        brackets_map[bracket] = brackets_map[bracket] + brackets_map[bracket]\n\n    return True\n\n",
        "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    if brackets == '<>':\n        return True\n    if brackets == '<>':\n        return False\n    if brackets == '<>':\n        return False\n    if brackets == '<>':\n        return False\n    if brackets == '<>':\n        return False\n    if brackets == '<>':\n        return False\n    if brackets == '<>':\n        return False\n    if brackets == '<>':\n        return False\n    if brackets == '<>':\n        return False\n    if brackets == '<>':\n        return False\n    if brackets == '<>':\n        return False\n    if brackets == '<>':\n        return False\n    if brackets == '<>':\n        return False\n    if brackets == '<>':\n        return False\n    if brackets == '<>':\n        return False\n    if brackets == '<>':\n        return False\n    if brackets == '<>':\n        return False\n    if brackets == '<>':\n        return False\n    if brackets == '<>':\n        return False\n    if brackets == '<>':\n        return False\n    if brackets == '<>':\n        return False\n    if brackets == '<>':\n        return False\n    if brackets == '<>':\n        return False\n    if brackets == '<>':\n        return False\n    if brackets == '<>':\n        return False\n    if brackets == '<>':\n        return False\n    if brackets == '<>':\n        return False\n    if brackets == '<>':\n        return False\n    if brackets == '<>':\n        return False\n    if brackets == '<>':\n        return False",
        "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')",
        "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    brackets = brackets.split('>')\n    for bracket in brackets:\n        if bracket == '<':\n            if brackets.index(bracket) == 0:\n                return True\n        elif bracket == '>':\n            if brackets.index(bracket) == len(brackets) - 1:\n                return True\n    return False\n\n",
        "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    if not brackets:\n        return False\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets",
        "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    if len(brackets) == 0:\n        return True\n    if len(brackets) == 1:\n        return brackets == brackets[0]\n    if brackets[0] == '<':\n        return correct_bracketing(brackets[1:])\n    if brackets[0] == '>':\n        return correct_bracketing(brackets[1:])\n    return False\n\n",
        "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    brackets_list = brackets.split('>')\n    for bracket in brackets_list:\n        if bracket == '<':\n            if brackets_list.index(bracket) == 0:\n                return True\n        elif bracket == '>':\n            if brackets_list.index(bracket) == len(brackets_list) - 1:\n                return True\n    return False\n\n",
        "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')\n    brackets = brackets.replace('>', '>')\n    brackets = brackets.replace('<', '<')",
        "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    if not brackets:\n        return False\n\n    brackets_map = {\n        '<': '>',\n        '>': '<',\n    }\n\n    for bracket in brackets:\n        if bracket not in brackets_map:\n            return False\n        else:\n            brackets_map[bracket] = brackets_map[bracket]\n\n    return True\n\n",
        "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    brackets_map = {\n        '<': '>',\n        '>': '<',\n    }\n    for bracket in brackets:\n        if bracket not in brackets_map:\n            return False\n        brackets_map[bracket] = brackets_map[bracket] + '>'\n    return True\n\n",
        "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing('<')\n    False\n    >>> correct_bracketing('<>')\n    True\n    >>> correct_bracketing('<<><>>')\n    True\n    >>> correct_bracketing('><<>')\n    False\n    \"\"\"\n    brackets_list = brackets.split('>')\n    for bracket in brackets_list:\n        if bracket == '<':\n            if brackets_list.index(bracket) == 0:\n                return True\n        elif bracket == '>':\n            if brackets_list.index(bracket) == len(brackets_list) - 1:\n                return True\n    return False\n\n"
    ],
    "Tests": "def check(candidate):\n    assert candidate('<>') == True\n    assert candidate('<<><>>') == True\n    assert candidate('<><><<><>><>') == True\n    assert candidate('<><><<<><><>><>><<><><<>>>') == True\n    assert candidate('<<<><>>>>') == False\n    assert candidate('><<>') == False\n    assert candidate('<') == False\n    assert candidate('<<<<') == False\n    assert candidate('>') == False\n    assert candidate('<<>') == False\n    assert candidate('<><><<><>><>><<>') == False\n    assert candidate('<><><<><>><>>><>') == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
}