{
    "Prompt": "from typing import List\n\ndef match_parens(lst: List[str]) -> str:\n    \"\"\"\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    >>> match_parens(['()(', ')'])\n    'Yes'\n    >>> match_parens([')', ')'])\n    'No'\n    \"\"\"",
    "Completions": [
        "from typing import List\n\ndef match_parens(lst: List[str]) -> str:\n    \"\"\"\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    >>> match_parens(['()(', ')'])\n    'Yes'\n    >>> match_parens([')', ')'])\n    'No'\n    \"\"\"\n    if len(lst) == 1:\n        return lst[0] == '('\n    if len(lst) == 2:\n        return lst[0] == '(' and lst[1] == ')'\n    if lst[0] == '(' and lst[1] == ')':\n        return match_parens(lst[1:]) == 'Yes'\n    if lst[0] == ')' and lst[1] == '(':\n        return match_parens(lst[1:]) == 'Yes'\n    return 'No'\n\n",
        "from typing import List\n\ndef match_parens(lst: List[str]) -> str:\n    \"\"\"\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    >>> match_parens(['()(', ')'])\n    'Yes'\n    >>> match_parens([')', ')'])\n    'No'\n    \"\"\"\n    if not lst:\n        return 'No'\n    if len(lst) == 1:\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'Yes'\n    return 'No'\n",
        "from typing import List\n\ndef match_parens(lst: List[str]) -> str:\n    \"\"\"\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    >>> match_parens(['()(', ')'])\n    'Yes'\n    >>> match_parens([')', ')'])\n    'No'\n    \"\"\"\n    return not any(lst)\n",
        "from typing import List\n\ndef match_parens(lst: List[str]) -> str:\n    \"\"\"\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    >>> match_parens(['()(', ')'])\n    'Yes'\n    >>> match_parens([')', ')'])\n    'No'\n    \"\"\"\n    if not lst:\n        return 'No'\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == '(':\n        return 'Yes'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == '(' and lst[1]",
        "from typing import List\n\ndef match_parens(lst: List[str]) -> str:\n    \"\"\"\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    >>> match_parens(['()(', ')'])\n    'Yes'\n    >>> match_parens([')', ')'])\n    'No'\n    \"\"\"\n    # TODO: Implement your solution here\n    if not lst:\n        return 'No'\n\n    if len(lst) == 1:\n        return 'Yes'\n\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n\n    if lst[0] == ')' and lst[1] == '(':\n        return 'Yes'\n\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n\n    if lst[0] == ')' and lst[1] == '(':\n        return 'Yes'\n\n    if lst[0] == '(' and lst[1] == '(':\n        return 'Yes'\n\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n\n    if lst[0] == ')' and lst[1] == '(':\n        return 'Yes'\n\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes",
        "from typing import List\n\ndef match_parens(lst: List[str]) -> str:\n    \"\"\"\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    >>> match_parens(['()(', ')'])\n    'Yes'\n    >>> match_parens([')', ')'])\n    'No'\n    \"\"\"\n    if not lst:\n        return 'No'\n    if len(lst) == 1:\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == '(':\n        return 'Yes'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0",
        "from typing import List\n\ndef match_parens(lst: List[str]) -> str:\n    \"\"\"\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    >>> match_parens(['()(', ')'])\n    'Yes'\n    >>> match_parens([')', ')'])\n    'No'\n    \"\"\"\n    if len(lst) == 0:\n        return 'No'\n    if len(lst) == 1:\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == '(':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst",
        "from typing import List\n\ndef match_parens(lst: List[str]) -> str:\n    \"\"\"\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    >>> match_parens(['()(', ')'])\n    'Yes'\n    >>> match_parens([')', ')'])\n    'No'\n    \"\"\"\n    if not lst:\n        return 'No'\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        return 'Yes'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'No'\n    if lst[0] == '(' and lst[1] == '(':\n        return 'No'\n    if lst[0] == ')' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == ')' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == ')' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] ==",
        "from typing import List\n\ndef match_parens(lst: List[str]) -> str:\n    \"\"\"\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    >>> match_parens(['()(', ')'])\n    'Yes'\n    >>> match_parens([')', ')'])\n    'No'\n    \"\"\"\n    def is_good(s):\n        if len(s) == 1:\n            return True\n        if s[0] == '(':\n            return is_good(s[1:])\n        if s[0] == ')':\n            return not is_good(s[1:])\n        return False\n\n    return is_good(lst[0])\n\n",
        "from typing import List\n\ndef match_parens(lst: List[str]) -> str:\n    \"\"\"\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    >>> match_parens(['()(', ')'])\n    'Yes'\n    >>> match_parens([')', ')'])\n    'No'\n    \"\"\"\n    def is_balanced(s: str) -> bool:\n        \"\"\"\n        >>> is_balanced('()')\n        True\n        >>> is_balanced('()()')\n        True\n        >>> is_balanced('()(()')\n        True\n        >>> is_balanced('()(()(()))')\n        True\n        >>> is_balanced('()(()(()))(()')\n        True\n        >>> is_balanced('()(()(()))(()(()))')\n        True\n        >>> is_balanced('()(()(()))(()(()))(()(()(()))')\n        True\n        >>> is_balanced('()(()(()))(()(()))(()(()(()))(()(()))(()(()(()))(()(()))(()(()(()))(()(()))(()(()(()))(()(()))(()(()(()))(()(()))(()(()(()))(()(()))(()(()(()))(()(()))(()(()(()))(()(()))(()(()(()))(()(()))(()(()(()))(()(()))(()(()(()))(()(()))(()(()(()))(()(()))(()(()(()))(()(()))(()(()(()))(()(()))(()(()(()))(()(()))(()(()(()))(()(()))(()(()(",
        "from typing import List\n\ndef match_parens(lst: List[str]) -> str:\n    \"\"\"\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    >>> match_parens(['()(', ')'])\n    'Yes'\n    >>> match_parens([')', ')'])\n    'No'\n    \"\"\"\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        return 'Yes' if lst[0] == lst[1] else 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'Yes'\n    return 'No'\n\n",
        "from typing import List\n\ndef match_parens(lst: List[str]) -> str:\n    \"\"\"\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    >>> match_parens(['()(', ')'])\n    'Yes'\n    >>> match_parens([')', ')'])\n    'No'\n    \"\"\"\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        return 'Yes' if lst[0] == '(' and lst[1] == ')' else 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes' if lst[0] == '(' and lst[1] == ')' else 'No'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'Yes' if lst[0] == ')' and lst[1] == '(' else 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes' if lst[0] == '(' and lst[1] == ')' else 'No'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'Yes' if lst[0] == ')' and lst[1] == '(' else 'No'\n    if lst[0] == '(' and lst[1] == '(':\n        return 'Yes' if lst[0] == '(' and lst[1] == '(' else 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes' if lst[0] == '(' and lst[1] == ')",
        "from typing import List\n\ndef match_parens(lst: List[str]) -> str:\n    \"\"\"\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    >>> match_parens(['()(', ')'])\n    'Yes'\n    >>> match_parens([')', ')'])\n    'No'\n    \"\"\"\n    if len(lst) == 0:\n        return 'No'\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == '(':\n        return 'Yes'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and",
        "from typing import List\n\ndef match_parens(lst: List[str]) -> str:\n    \"\"\"\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    >>> match_parens(['()(', ')'])\n    'Yes'\n    >>> match_parens([')', ')'])\n    'No'\n    \"\"\"\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        return 'Yes' if lst[0] == lst[1] else 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == '(':\n        return 'Yes'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'No'\n    return 'No'\n\n",
        "from typing import List\n\ndef match_parens(lst: List[str]) -> str:\n    \"\"\"\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    >>> match_parens(['()(', ')'])\n    'Yes'\n    >>> match_parens([')', ')'])\n    'No'\n    \"\"\"\n    if not lst:\n        return 'No'\n    if len(lst) == 1:\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == '(':\n        return 'Yes'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0",
        "from typing import List\n\ndef match_parens(lst: List[str]) -> str:\n    \"\"\"\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    >>> match_parens(['()(', ')'])\n    'Yes'\n    >>> match_parens([')', ')'])\n    'No'\n    \"\"\"\n    if not lst:\n        return 'No'\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == '(':\n        return 'Yes'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] ==",
        "from typing import List\n\ndef match_parens(lst: List[str]) -> str:\n    \"\"\"\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    >>> match_parens(['()(', ')'])\n    'Yes'\n    >>> match_parens([')', ')'])\n    'No'\n    \"\"\"\n    if not lst:\n        return 'No'\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == '(':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] ==",
        "from typing import List\n\ndef match_parens(lst: List[str]) -> str:\n    \"\"\"\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    >>> match_parens(['()(', ')'])\n    'Yes'\n    >>> match_parens([')', ')'])\n    'No'\n    \"\"\"\n    if not lst:\n        return 'No'\n    if len(lst) == 1:\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == '(':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'No'\n    return 'No'\n\n",
        "from typing import List\n\ndef match_parens(lst: List[str]) -> str:\n    \"\"\"\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    >>> match_parens(['()(', ')'])\n    'Yes'\n    >>> match_parens([')', ')'])\n    'No'\n    \"\"\"\n    if not lst:\n        return 'No'\n    if len(lst) == 1:\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == '(':\n        return 'Yes'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0]",
        "from typing import List\n\ndef match_parens(lst: List[str]) -> str:\n    \"\"\"\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    >>> match_parens(['()(', ')'])\n    'Yes'\n    >>> match_parens([')', ')'])\n    'No'\n    \"\"\"\n    if not lst:\n        return 'No'\n    if len(lst) == 1:\n        return 'Yes'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0]"
    ],
    "Tests": "def check(candidate):\n    assert candidate(['()(', ')']) == 'Yes'\n    assert candidate([')', ')']) == 'No'\n    assert candidate(['(()(())', '())())']) == 'No'\n    assert candidate([')())', '(()()(']) == 'Yes'\n    assert candidate(['(())))', '(()())((']) == 'Yes'\n    assert candidate(['()', '())']) == 'No'\n    assert candidate(['(()(', '()))()']) == 'Yes'\n    assert candidate(['((((', '((())']) == 'No'\n    assert candidate([')(()', '(()(']) == 'No'\n    assert candidate([')(', ')(']) == 'No'\n    assert candidate(['(', ')']) == 'Yes'\n    assert candidate([')', '(']) == 'Yes'\n\ndef test_check():\n    check(match_parens)\n\ntest_check()\n"
}